<?xml version="1.0"?>
<section xml:id="basic-ds_implementing-a-deque">
  <title>Implementing a Deque in Java</title>
  <p>As we have done in previous sections, we will create a new class for the
            implementation of the abstract data type deque. Again, the Java ArrayList
            will provide a very nice set of methods upon which to build the details
            of the deque. Our implementation (<xref ref="lst-dequecode"/>) will assume that
            the tail of the deque is at position 0 in the list.</p>
  <listing xml:id="lst-dequecode">
      <caption>Implementation of a Deque</caption>
<program label="lst-dequecode"  language="java">
    <input>
import java.util.ArrayList;
import java.util.NoSuchElementException;

public class Deque&lt;T&gt; {

    /*
     * The tail of the deque is at the beginning
     * of the ArrayList; the head is the last item
     */
    ArrayList&lt;T&gt; items;

    /*
     * Create a new Deque
     */
    public Deque() {
        this.items = new ArrayList&lt;T&gt;();
    }

    /*
     * Returns true if there are no items in the deque;
     * false otherwise.
     */
    public boolean isEmpty() {
        return (this.items.isEmpty());
    }

    /*
     * Add an item to the head of the deque
     */
    public void addHead(T item) {
        this.items.add(item);
    }

    /*
     * Add an item to the tail of the deque
     */
    public void addTail(T item) {
        this.items.add(0, item);
    }

    /*
     * Remove the item at the head of the deque and return it.
     * If the deque is empty, throws an exception.
     */
    public T removeHead() {
        if (this.isEmpty()) {
            throw new NoSuchElementException("Deque is empty.");
        }
        return this.items.remove(this.size() - 1);
    }

    /*
     * Remove the item at the tail of the deque and return it.
     * If the deque is empty, throws an exception.
     */
    public T removeTail() {
        if (this.isEmpty()) {
            throw new NoSuchElementException("Deque is empty.");
        }
        return this.items.remove(0);
    }

    /*
     * Return the item at the head of the deque, but do not remove it.
     * If the deque is empty, throws an exception.
     */
    public T peekHead() {
        if (this.isEmpty()) {
            throw new NoSuchElementException("Deque is empty.");
        }
        return this.items.get(this.size() - 1);
    }

    /*
     * Return the item at the tail of the deque, but do not remove it.
     * If the deque is empty, throws an exception.
     */
    public T peekTail() {
        if (this.isEmpty()) {
            throw new NoSuchElementException("Deque is empty.");
        }
        return this.items.get(0);
    }

    /*
     * Returns the number of items in the deque.
     */
    public int size() {
        return this.items.size();
    }

    /*
     * Convert to string as an array from tail to head
     */
    public String toString() {

        if (!this.items.isEmpty()) {
            String arrString = this.items.toString();
            return "tail " + arrString + " head";
        } else {
            return "&lt;&lt;empty deque&gt;&gt;";
        }
    }
}

</input>
  </program>
  </listing>

  <p><xref ref="lst_deqtest"/> shows a deque in
            action as we perform the sequence of operations from
            <xref ref="basic-ds_the-deque-abstract-data-type"/>.</p>
        <listing xml:id="lst_deqtest">
            <caption>Test of Deque Operation</caption>
  <program xml:id="deqtest" language="java">
    <input>
public class DequeTest {

    /*
     * Show the operation, its result (if any), and the resulting deque
     */
    public static void display(String operation, String result, Deque d) {
        System.out.printf("%-17s | %-7s | %s%n", operation, result,
            d.toString());
    }

    public static void main(String[] args) {

        Deque&lt;Integer&gt; d = new Deque&lt;&gt;();
        display("d.isEmpty()", Boolean.toString(d.isEmpty()), d);

        d.addTail(4);
        display("d.addTail(4)", "", d);

        d.addTail(505);
        display("d.addTail(505)", "", d);

        d.addHead(1066);
        display("d.addHead(1066)", "", d);

        d.addHead(4711);
        display("d.addHead(4711)", "", d);

        display("d.size", Integer.toString(d.size()), d);

        display("d.isEmpty()", Boolean.toString(d.isEmpty()), d);

        d.addTail(217);
        display("d.addTail(217)", "", d);

        Integer value = d.removeTail();
        display("d.removeTail()", Integer.toString(value), d);

        value = d.removeHead();
        display("d.removeHead()", Integer.toString(value), d);

    }
}
    </input>
  </program>
</listing>

<p>And here is its output:</p>
<console><output>
d.isEmpty()       | true    | &lt;&lt;empty deque&gt;&gt;
d.addTail(4)      |         | tail [4] head
d.addTail(505)    |         | tail [505, 4] head
d.addHead(1066)   |         | tail [505, 4, 1066] head
d.addHead(4711)   |         | tail [505, 4, 1066, 4711] head
d.size            | 4       | tail [505, 4, 1066, 4711] head
d.isEmpty()       | false   | tail [505, 4, 1066, 4711] head
d.addTail(217)    |         | tail [217, 505, 4, 1066, 4711] head
d.removeTail()    | 217     | tail [505, 4, 1066, 4711] head
d.removeHead()    | 4711    | tail [505, 4, 1066] head
</output></console>

  <p>You can see many similarities to Java code already described for
            stacks and queues. You are also likely to observe that in this
            implementation adding and removing items from the head is <m>O(1)</m> whereas
            adding and removing from the tail is <m>O(n)</m>. This is to be expected, given
            the common operations that appear for adding and removing items. Again,
            the important thing is to be certain that we know where the head and
            tail are assigned in the implementation.</p>
</section>
