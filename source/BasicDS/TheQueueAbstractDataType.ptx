<?xml version="1.0"?>
<section xml:id="basic-ds_the-queue-abstract-data-type">
  <title>The Queue Abstract Data Type</title>
  <p>The queue abstract data type is defined by the following structure and
            operations. A queue is structured, as described above, as an ordered
            collection of items which are added at one end, called the <em>tail</em>, and
            removed from the other end, called the <em>head</em>. Queues maintain a FIFO (First In, First Out)
            ordering property. The queue operations are given below.</p>
  <p>
    <ul>
      <li>
        <p><c>Queue()</c> creates a new queue that is empty. It needs no parameters
                    and returns an empty queue.</p>
      </li>
      <li>
        <p><c>enqueue(item)</c> adds a new item to the tail of the queue. It needs
                    the item and returns nothing.</p>
      </li>
      <li>
        <p><c>dequeue()</c> removes the head item from the queue. It needs no
                    parameters and returns the item. The queue is modified.</p>
      </li>
      <li>
        <p><c>peek()</c> returns the head item from the queue. It needs no
          parameters. The queue is not modified.</p>
      </li>
      <li>
        <p><c>isEmpty()</c> tests to see whether the queue is empty. It needs no
          parameters and returns boolean <c>true</c> if the queue is empty, <c>false</c> otherwise.</p>
      </li>
      <li>
        <p><c>size()</c> returns the number of items in the queue. It needs no
                    parameters and returns an integer.</p>
      </li>
    </ul>
  </p>
  <p>As an example, if we assume that <c>q</c> is a queue that has been created
            and is currently empty, then <xref ref="basic-ds_tbl-queueoperations"/> shows the
            results of a sequence of queue operations. The queue contents are shown
            such that the head is on the right. The first item enqueued was <c>4</c> so it
            is the first item returned by <c>dequeue</c>.</p>
  <table xml:id="basic-ds_tbl-queueoperations">
      <title>
        Example Queue Operations
      </title>
    <tabular>
      <row header="yes">
        <cell>Queue Operation</cell>
        <cell>Queue Contents</cell>
        <cell>Return Value</cell>
      </row>
      <row>
        <cell><c>q.is_empty()</c></cell>
        <cell><c>[]</c></cell>
        <cell><c>true</c></cell>
      </row>
      <row>
        <cell><c>q.enqueue(4)</c></cell>
        <cell><c>[4]</c></cell>
        <cell></cell>
      </row>
      <row>
        <cell><c>q.enqueue(27)</c></cell>
        <cell><c>[27,4]</c></cell>
        <cell></cell>
      </row>
      <row>
        <cell><c>q.enqueue(1066)</c></cell>
        <cell><c>[1066, 27, 4]</c></cell>
        <cell></cell>
      </row>
      <row>
        <cell><c>q.size()</c></cell>
        <cell><c>[1066, 27, 4]</c></cell>
        <cell><c>3</c></cell>
      </row>
      <row>
        <cell><c>q.is_empty()</c></cell>
        <cell><c>[1066, 27, 4]</c></cell>
        <cell><c>False</c></cell>
      </row>
      <row>
        <cell><c>q.enqueue(4711)</c></cell>
        <cell><c>[4711, 1066, 27, 4]</c></cell>
        <cell></cell>
      </row>
      <row>
        <cell><c>q.dequeue()</c></cell>
        <cell><c>[4711, 1066, 27]</c></cell>
        <cell><c>4</c></cell>
      </row>
      <row>
        <cell><c>q.dequeue()</c></cell>
        <cell><c>[4711, 1066]</c></cell>
        <cell><c>27</c></cell>
      </row>
      <row>
        <cell><c>q.size()</c></cell>
        <cell><c>[4711, 1066]</c></cell>
        <cell><c>2</c></cell>
      </row>
    </tabular>
  </table>
</section>
