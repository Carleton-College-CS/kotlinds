<?xml version="1.0"?>
<section xml:id="advanced_recursion-revisited">
  <title>Recursion Revisited</title>
  <introduction>
  <p>One of the most common uses of numerical computing today is in the field
            of cryptography. Each time you check your bank account, sign on to a
            secure website to purchase something, or sign on to your computer, you
            are using cryptography. In a general sense, <em>cryptography</em> is
            concerned with encrypting and decrypting information that you do not
            want other people to see. In this section we will look at some functions
            that are used in everyday cryptographic programming. In practice there
            may be faster ways to implement these functions, but each of them has an
            interesting recursive implementation.</p>
  <p>The algorithms in this section make use of Java's modulo operator (%).
            Remember that <m>a \% b</m> is what is left over after <m>a</m> is
            divided by <m>b</m>, for example <m>10 \% 7 = 3</m>. When we compute
            the result of any mathematical expression modulo 10, the only possible
            results are 0&#x2013;9.</p>
  <p>One of the earliest forms of cryptography used only simple modular
            arithmetic. Take the string <c>"uryybjbeyq"</c>, for example. Can you guess
            what message is encrypted? <xref ref="lst_enc"/> shows you
            the function that produced the message. Look at the listing and see if
            you can figure it out.</p>
          <listing xml:id="lst_enc">
            <program language="java">
              <input>
public class ROT13 {

    public static String encrypt(String message) {
        String alphabet = "abcdefghijklmnopqrstuvwxyz";
        String result = "";
        for (int i = 0; i &lt; message.length(); i++) {
            int position = alphabet.indexOf(message.charAt(i));
            if (position >= 0) {
                result = result + alphabet.charAt((position + 13) % 26);
            } else {
                result = result + message.charAt(i);
            }
        }
        return result;
    }

    public static void main(String [] args) {
        String test = "let us encrypt this.";
        String encrypted = encrypt(test);
        System.out.println(encrypted);
        String decrypted = encrypt("encrypted");
        System.out.println(decrypted);

        System.out.println(encrypt("uryybjbeyq");
    }
}
</input>
</program>
</listing>
  <p>The <c>encrypt</c> function illustrates a form of encryption known as the
            Caesar Cipher. It also goes by the name ROT13, which is a bit more
            descriptive. <c>encrypt</c> simply takes each letter in the message and
            adds 13 to its ordinal position in the alphabet. If the position goes
            past the end of the alphabet, it wraps around. This wraparound function
            is easily accomplished using the modulo operator. In addition, since
            there are 26 letters in the alphabet, this function is symmetric. The
            symmetry allows us to use the function to encrypt and decrypt the same
            message. If you pass the string <c>"uryybjbeyg"</c> to the <c>encrypt</c>
            function, it returns <c>"helloworld"</c>.</p>
  <p>Rotations by amounts other than 13 are possible; however, they are not
            symmetric with respect to encrypting and decrypting. Asymmetry would
            require us to write a separate decryption algorithm that subtracts the
            amount to rotate. In that case, we could generalize both the <c>encrypt</c>
            and <c>decrypt</c> functions to take the amount of rotation as a parameter.
            In cryptographic terms, the rotation parameter is called the <em>key</em> and
            would be the number of positions to rotate. Given the message and the
            key, the encryption and decryption algorithms can do their jobs.
            <xref ref="lst_dec_key"/> shows the decryption algorithm
            that takes the amount of rotation as a parameter. As an exercise you
            should be able to modify <xref ref="lst_dec_key"/> to accept a
            parameter that specifies a key.</p>
          <listing xml:id="lst_dec_key">
            <program language="java">
  <input>
      public static String decrypt(String message, int key) {
        String alphabet = "abcdefghijklmnopqrstuvwxyz";
        String result = "";
        for (int i = 0; i &lt; message.length(); i++) {
            int position = alphabet.indexOf(message.charAt(i));
            if (position >= 0) {
                result = result +
                    alphabet.charAt((position + 26 - key) % 26);
            } else {
                result = result + message.charAt(i);
            }
        }
        return result;
    }
    </input></program>
</listing>
  <p>Even if you keep the number <c>key</c> from everyone except the person you
            are sending the message to, this simple form of encryption is not going
            to stop anyone from stealing your secrets for very long. In the
            remainder of this section, we will build up to a much more secure form
            of encryption, the RSA <term>public key encryption</term> algorithm.</p>
        </introduction>
  <subsection xml:id="advanced_modular-arithmetic-theorems">
    <title>Modular Arithmetic Theorems</title>
    <p>If two numbers, <m>a</m> and <m>b</m>, give the same remainder when
                divided by <m>n</m>, we say that <m>a</m> and <m>b</m> are <q>congruent
                modulo <m>n</m>.</q> In shorthand we write <m>a \equiv~b~\pmod{n}</m>.
                The algorithms in this section make use of three important theorems:</p>
    <p>
      <ol marker="1">
        <li>
          <p>If <m>a \equiv b \pmod{n}</m> then
                        <m>\forall c, a + c \equiv b + c \pmod{n}</m>.</p>
        </li>
        <li>
          <p>If <m>a \equiv b \pmod{n}</m> then
                        <m>\forall c, ac \equiv bc \pmod{n}</m>.</p>
        </li>
        <li>
          <p>If <m>a \equiv b \pmod{n}</m> then
                        <m>\forall p, p &gt; 0, a^p \equiv b^p \pmod{n}</m>.</p>
        </li>
      </ol>
    </p>
  </subsection>
  <subsection xml:id="advanced_modular-exponentiation">
    <title>Modular Exponentiation</title>
    <p>Suppose we wanted to know the last digit of <m>3^{1,254,906}</m>. Not
                only is that a large computation problem, but using Java's
                arbitrary-precision integers (the <c>BigInteger</c> class), the number has 598,743 digits! All we want to know
                is the value of the rightmost digit. There are really two problems here.
                First, how do we compute <m>x^n</m> efficiently? Second, how can we
                compute <m>x^n \pmod{p}</m> without first calculating all 598,743
                digits and then looking at the last one?</p>
    <p>The answer to the second question is easy, given the third theorem from
                above.</p>
    <p>
      <ol marker="1">
        <li>
          <p>Initialize result to 1.</p>
        </li>
        <li>
          <p>Repeat <m>n</m> times:</p>
          <p>
            <ol marker="1">
              <li>
                <p>Multiply result by <m>x</m>.</p>
              </li>
              <li>
                <p>Apply modulo operation to result.</p>
              </li>
            </ol>
          </p>
        </li>
      </ol>
    </p>
    <p>The above approach makes the computation simpler because we are keeping
                the result smaller rather than following it out to its full precision.
                However, we can do even better using a recursive approach.</p>
    <me>x^n =
   \begin{cases}
   (x \cdot x)^{ n/2 } &amp; \text{if <m>n</m> is even} \\
   (x \cdot x^{n-1}) = x \cdot (x \cdot x)^{\lfloor n/2 \rfloor} &amp; \text{if <m>n</m> is odd}
   \end{cases}
   \label{eqn:pow}</me>
    <p>Remember that for a floating point number <m>n</m>, the floor operation
                <m>\lfloor n \rfloor</m> results in the largest integer smaller than
                <m>n</m>. Java's integer division returns the floor of the
                result of the division, so we do not need to do anything special in our
                code to achieve the results we want. The above equation gives us a very
                nice recursive definition for computing <m>x^n</m>. All we need now is
                a base case. Recall that for any number <m>x</m>, <m>x^0 = 1</m>.
                Since we are reducing the size of our exponent in each recursive call,
                checking for the condition <m>n = 0</m> is a good base case.</p>
              <listing xml:id="lst_pow">
    <program language="java">
      <input>
    public static int modExp(int x, int n, int p) {
        if (n == 0) {
            return 1;
        }
        int t = (x * x) % p;
        int result = modExp(t, n / 2, p);
        if (n % 2 != 0) {
            result = (result * x) % p;
        }
        return result;
    }
</input>
</program>
</listing>
    <p>Notice that in the above equation both the even and odd cases include a
                factor of <m>(x \cdot x)^{\lfloor n/2 \rfloor}</m>, so we compute that
                unconditionally and store it in the variable <c>t</c>. Also note that
                since we are computing modulo <c>p</c> we still apply the modulo operator
                at each step of the calculation. The solution in
                <xref ref="lst_pow"/> keeps the result size small and uses
                many fewer multiplications than a purely iterative approach. (For <m>3^{1,254,906}</m>,
                  there are only 22 multiplications.)</p>
  </subsection>
  <subsection xml:id="advanced_the-greatest-common-divisor-and-multiplicative-inverses">
    <title>The Greatest Common Divisor and Multiplicative Inverses</title>
    <p>A <em>multiplicative inverse</em> of a positive integer <m>x</m> modulo
                <m>m</m> is any number <m>a</m> such that
                <m>ax \equiv 1 \pmod{m}</m>. For example, let <m>x = 3</m>,
                <m>m = 7</m>, and <m>a = 5</m>; <m>3 \times 5 = 15</m> and
                <m>15\ \%\ 7 = 1</m>, so 5 is a multiplicative inverse of 3 modulo 7.</p>
    <p>The idea of multiplicative inverses in the world of modulo arithmetic
                may seem very confusing at first. How did we select 5 in the previous
                example? Is 5 the only multiplicative inverse of 3 modulo 7? Do all
                numbers <m>a</m> have a multiplicative inverse for any given <m>m</m>?</p>
    <p>Let's look at an example that may shed some light on the first question:
                how did we select 5 as the multiplicative inverse of 3 modulo 7? Look
                at the following jshell session:</p>
    <pre>jshell> for (int i = 1; i &lt; 40; i++) {
   ...>     if ((3 * i) % 7 == 1) {
   ...>         System.out.println(i);
   ...>     }
   ...> }
5
12
19
26
33</pre>
    <p>This little experiment tells us that there are many multiplicative
                inverses (modulo 7) for <m>x=3</m> and <m>m = 7</m>, namely
                <m>5, 12, 19, 26, 33</m>, and so on. Do you notice anything interesting
                about the sequence? Each number in the sequence is two less than a
                multiple of seven.</p>
    <p>Do all pairs of numbers <m>x</m> and <m>m</m> have a multiplicative
                inverse? Let's look at another example. Consider <m>x=4</m> and
                <m>m=8</m>. Plugging 4 and 8 into the loop in the previous example
                gives us no output. If we take out the conditional and print out the
                results of <m>(4 \cdot i)\ \%\ 8</m>, we get the sequence <m>(0, 4, 0, 4, 0, 4\dots</m>).
                Here we have a case where the remainder alternates between 0 and 4
                repeatedly. Clearly the result is never going to be 1. How can we know
                that ahead of time?</p>
    <p>The answer is that a number <m>x</m> has a multiplicative inverse,
                modulo <m>m</m>, if and only if <m>m</m> and <m>x</m> are relatively
                prime. Two numbers are relatively prime if <m>gcd(m, x) = 1</m>. Recall
                that the greatest common divisor (GCD) is the largest integer that
                divides both numbers. The next question is how can we compute the
                greatest common divisor for a pair of numbers?</p>
    <p>Given two numbers <m>a</m> and <m>b</m> we can find the GCD by
                repeatedly subtracting <m>b</m> from <m>a</m> until <m>a &lt; b</m>.
                When <m>a &lt; b</m>, we switch roles for <m>a</m> and <m>b</m>. At some
                point <m>a - b</m> becomes 0, so we swap <m>a</m> and <m>b</m> one
                more time. At that point we have <m>gcd(a, 0) = a</m>. This algorithm
                was first described more than 2,000 years ago and is called Euclid's
                algorithm.</p>
    <p>In terms of recursive algorithm design, Euclid's algorithm is very
                straightforward. The base case is when <m>b = 0</m>. There are two
                possibilities for a recursive call: when <m>a &lt; b</m>, we swap
                <m>a</m> and <m>b</m> and make a recursive call. Otherwise, we can
                make a recursive call passing <m>a - b</m> in place of <m>a</m>.
                Euclid's algorithm is shown in <xref ref="lst_gcd1"/>.</p>
              <listing xml:id="lst_gcd1">
                <program language="java">
                  <input>
    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        else if (a &lt; b) {
            return gcd(b, a);
        }
        return gcd(a - b, b);
    }
                  </input>
                </program>
              </listing>

    <p>Although Euclid's algorithm is quite easy to understand and program, it
                is not as efficient as we would like, particularly if <m>a &gt;&gt; b</m>.
                Once again, modular arithmetic comes to our rescue. Notice that the
                result of the last subtraction (when <m>a - b &lt; b</m>) is really the
                same as the remainder of <m>a</m> divided by <m>b</m>. With that in
                mind, we can cut out all of the subtractions and combine the swap of
                <m>a</m> and <m>b</m> in one recursive call. A revised algorithm is
                shown in Listing&#xA0;<xref ref="lst_gcd2"/>.</p>
              <listing xml:id="lst_gcd2">
                <program language="java">
                  <input>
    public static int gcd(int a, int b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
                  </input>
                </program>
              </listing>

    <p>Now that we have a way to know whether two numbers <m>x</m> and
                <m>m</m> will have a multiplicative inverse, our next task is to write
                an efficient algorithm to compute the inverse. Suppose that for any pair
                of numbers <m>x</m> and <m>y</m> we could compute both
                <m>gcd(x,y)</m> and a pair of integers <m>a</m> and <m>b</m> such
                that <m>d = gcd(x, y) = ax + by</m>. For example,
                <m>1 = gcd(3, 7) = -2 \times 3 + 1 \times 7</m>, so here <m>a = -2</m>
                and <m>b = 1</m> are possible values for <m>a</m> and <m>b</m>.</p>

    <p>Rather than any numbers <m>x</m> and <m>y</m>, let's use <m>m</m> and
                <m>x</m> from our previous examples. Now we have
                <m>1 = gcd(m, x) = am + bx</m>. From the discussion at the beginning of
                this section we know that <m>bx = 1 \mod{m}</m>, so <m>b</m> is a
                multiplicative inverse of <m>x</m> modulo <m>m</m>.</p>

    <p>We have reduced the problem of computing inverses to the problem of
                finding integers <m>a</m> and <m>b</m> that satisfy the equation
                <m>d = gcd(x, y) = ax + by</m>. Since we started this problem with the
                GCD algorithm, we can finish it with an extension of this algorithm
                as well. We will take two numbers <m>x &gt;= y</m> and return an array of three
                numbers  <m>[d, a, b]</m> such that <m>d = gcd(x, y)</m> and
                <m>d = ax + by</m>. The extension to Euclid's algorithm is shown in
                <xref ref="lst_gcd3"/>.</p>
              <listing xml:id="lst_gcd3">
    <program language="java">
      <input>
    public static int[] extGcd(int x, int y) {
        if (y == 0) {
            return(new int[] {x, 1, 0});
        } else {
            int[] info = extGcd(y, x % y);
            int d = info[0];
            int a = info[1];
            int b = info[2];
            return(new int[] {d, b, a - (x / y) * b});
        }
    }
        </input>
        </program>
        </listing>

    <p>Notice that when we get the base case <m>y = 0</m>, we return
                <m>d = x</m> just like the original Euclid's algorithm. However, we
                return two additional values <m>a =1</m> and <m>b = 0</m>. Together
                these three values satisfy the equation <m>d = ax + by</m>. If
                <m>y &gt; 0</m>, then we recursively compute values <m>(d, a, b)</m> such
                that <m>d = gcd(y, x \mod{y})</m> and <m>d = ay + b(x \mod{y})</m>.
                As with the original algorithm, <m>d = gcd(x, y)</m>. But what about
                the other two values, <m>a</m> and <m>b</m>? We know that <m>a</m>
                and <m>b</m> must be integers, so let's call them <m>A</m> and
                <m>B</m>. Further, we know that <m>d = Ax + By</m>. To figure out what
                <m>A</m> and <m>B</m> should be, let's rearrange the equation as
                follows:</p>
    <me>\begin{aligned}
d = &amp; ay + b(x \mod{y}) \\
  = &amp; ay + b(x - \lfloor x / y \rfloor y) \\
  = &amp; bx + (a - \lfloor x / y \rfloor b)y\end{aligned}</me>
    <p>Note the substitution made in the second line,
                <m>x \mod{y} = x - \lfloor x / y \rfloor</m>. This is legal because
                this is how we would normally calculate the remainder of x / y
                (<m>x \mod{y}</m>). Looking at the rearranged equation, we can see that
                <m>A = b</m> and <m>B = a - \lfloor x / y \rfloor b</m>. Notice that
                this is exactly what the expression in the <c>return</c> in <xref ref="lst_gcd3"/> <!--line <url href="#line:gcd3_return" visual="#line:gcd3_return">[line:gcd3_return]</url> -->
                does! To check this, note that at each return step in the algorithm the
                return values satisfy the equation <m>d = ax + by</m>.
                To understand how our extended GCD algorithm works, let's start with an
                example: let <m>x = 25</m> and <m>y = 9</m>. <xref ref="fig-gcd"/>
                illustrates the call and return values for the recursive function.</p>
    <figure align="" xml:id="fig-gcd">
      <caption>Call Tree for Extended GCD Algorithm</caption>
      <image source="Advanced/Figures/gcd-call.png" width="50%" alt="Call Tree for Extended GCD Algorithm"/>
    </figure>
  </subsection>
  <subsection xml:id="advanced_rsa-algorithm">
    <title>RSA Algorithm</title>
    <p>Now we have all the tools we need to write the RSA encryption algorithm.
                The <term>RSA algorithm</term> (named after the people who first
                publicly described it: Rivest, Shamir, and Adleman)
                is perhaps the easiest to understand of all the
                public key encryption algorithms. Public key cryptography was invented
                by Whitfield Diffie and Martin Hellman and independently by Ralph
                Merkle. The major contribution of public key cryptography was the idea
                that keys could come in pairs: an encryption key to convert the
                plaintext message to ciphertext, and a decryption key to convert the
                ciphertext back to plaintext. The keys only work one way so that a
                message encrypted with the private key can only be decrypted with the
                public key, and vice versa.</p>
    <p>RSA gets its security from the difficulty of factoring large numbers.
                The public and private keys are derived from a pair of large (100&#x2013;200
                digit) prime numbers. Since long integers are native to Python, this is
                a fun and easy algorithm to implement.</p>
    <p>To generate the two keys, choose two large prime numbers <m>p</m> and
                <m>q</m>. Then compute the product</p>
              <me>n = p \times q</me>

    <p>The next step is to randomly choose the encryption key <m>e</m> such
                that <m>e</m> and <m>(p - 1) \times (q - 1)</m> are relatively prime;
                that is</p>
    <me>gcd(e, (p - 1) \times (q-1)) = 1</me>
    <p>Finally, the decryption key <m>d</m> is simply the multiplicative
                inverse of <m>e</m> modulo <m>(p - 1) \times (q - 1)</m>. For this we
                can use our extended version of Euclid's algorithm.</p>
    <p>The numbers <m>e</m> and <m>n</m> taken together are the public key.
                The number <m>d</m> is the private key. Once we have computed
                <m>n, e</m>, and <m>d</m>, the original primes <m>p</m> and <m>q</m>
                are no longer needed. However, they should not be revealed.</p>
    <p>To encrypt a message we simply use the equation
                <m>c = m^e \pmod{n}</m>. To decrypt the message we use
                <m>m = c^d \pmod{n}</m>.</p>
    <p>It is easy to see that this works when you remember that <m>d</m> is
                the multiplicative inverse of <m>e \pmod{n}</m>.</p>
    <me>\begin{aligned}
   c^d &amp; = (m^e)^d  \pmod{n} \\
       &amp; = m^{ed}   \pmod{n} \\
       &amp; = m^1  \pmod{n} \\
       &amp; = m \pmod{n} \end{aligned}</me>
    <p>Before we turn all these equations into Python code, we need to talk
                about a couple of other details. First, how do we take a text message
                like <q>hello world</q> and turn it into a number? The easiest way is to
                simply use the ASCII values associated with each character and
                concatenate all the numbers together. However, since the decimal
                versions of the numbers of the ASCII values vary in the number of digits
                needed to represent them, we will use the hexadecimal numbers where we
                know very reliably that two hexadecimal digits represent a single byte
                or character.</p>
    <table>
      <tabular>
        <row>
          <cell>h</cell>
          <cell>e</cell>
          <cell>l</cell>
          <cell>l</cell>
          <cell>o</cell>
          <cell></cell>
          <cell>w</cell>
          <cell>o</cell>
          <cell>r</cell>
          <cell>l</cell>
          <cell>d</cell>
        </row>
        <row>
          <cell>104</cell>
          <cell>101</cell>
          <cell>108</cell>
          <cell>108</cell>
          <cell>111</cell>
          <cell>32</cell>
          <cell>119</cell>
          <cell>111</cell>
          <cell>114</cell>
          <cell>108</cell>
          <cell>100</cell>
        </row>
        <row>
          <cell>68</cell>
          <cell>65</cell>
          <cell>6c</cell>
          <cell>6c</cell>
          <cell>6f</cell>
          <cell>20</cell>
          <cell>77</cell>
          <cell>6f</cell>
          <cell>72</cell>
          <cell>6c</cell>
          <cell>64</cell>
        </row>
      </tabular>
    </table>
    <p>Putting all the hexadecimal digits together we could convert that large
                hex number into a decimal integer:</p>
    <me>m = 126207244316550804821666916</me>
    <p>Java can handle this large number just fine via the <c>BigInteger</c> class. However, there are two
                reasons that real programs using RSA encryption break the message up
                into smaller chunks and encrypt each chunk. The first reason is
                performance. Even a relatively short email message, say 1k of text, will
                generate a number with 2,000 to 3,000 digits! If we raise that to a
                power of <m>d</m> which has 10 digits, we are talking about a very long number
                indeed.</p>
    <p>The second reason for breaking the message into chunks is the
                restriction that <m>m \le n</m>. We must be sure that the message has a
                unique representation modulo <m>n</m>. With binary data, choose the
                largest power of two that is less than <m>n</m>. For example, let's choose
                <m>p</m> and <m>q</m> to be 5563 and 8191. So
                <m>n = 5563 \times 8191 = 45,566,533</m>. To keep the integer value of
                our chunks less than <m>m</m>, we will divide up our word into chunks
                that use less than the number of bytes needed to represent <m>n</m>.
                In Java, we can use the <c>BigInteger.bitLength()</c> method to find this value.
                Given the number of bits needed to represent a number, we can divide by eight
                to find the number of bytes. Since each character in the message can be
                represented by a single byte, this division tells us the number of bytes
                we can put in each chunk. Conveniently, this lets us simply break the
                message up into chunks of <m>n</m> characters and convert the hexadecimal
                representation of each chunk into an integer. For this example we can
                represent <m>45,566,533</m> using 26 bits. Using integer division and
                dividing by eight tells us that we should break our message into chunks
                of three characters.</p>
    <p>The characters <q>h,</q> <q>e,</q> and <q>l</q> have the hexadecimal values of <m>68</m>,
                <m>65</m>, and <m>6c</m>, respectively. Concatenating those together gives us <m>68656c</m> and
                converting that to a decimal gives us <m>6841708</m>.</p>
    <table>
      <tabular>
        <row>
          <cell><m>m_1 = 6841708</m></cell>
          <cell><m>m_2 = 7106336</m></cell>
          <cell><m>m_3 = 7827314</m></cell>
          <cell><m>m_4 = 27748</m></cell>
        </row>
      </tabular>
    </table>
    <p>Note that breaking the message into chunks can be very tricky, in particular
                when the result of applying the RSA transformation to a chunk produces a
                number that is less than seven digits long. In this case we need to be
                careful to add a leading zero to the result when we glue our
                chunks back together again. You can see how this might happen in
                <m>m_1</m> and <m>m_4</m> above.</p>
    <p>Now let's choose a value for <m>e</m>. We can select values randomly
                and use the GCD algorithm to test them against
                <m>(p - 1) \times (q - 1) = 45552780</m>. Remember that we are looking
                for an <m>e</m> that is relatively prime to 45,552,780. The number
                1,471 will work nicely for this example.</p>
    <me>\begin{aligned}
d &amp; = extGcd(45552780, 1471) \\
  &amp; = -11705609  \\
  &amp; = 45552780-11705609  \\
  &amp; = 33847171\end{aligned}</me>
    <p>Let's use this information to encrypt the first chunk of our message:</p>
    <me>c = 6841708^{1471} \pmod{45566533} = 16310024</me>

    <p>To check our work, let's decrypt <m>c</m> to make sure we recover the
                original value:</p>
              <me>m = 16310024^{33847171} \pmod{45566533} = 6841708</me>

    <p>The remaining chunks of the message can be encrypted using the same
                procedure and sent all together as the encrypted message.</p>
    <p>Finally, let's look at three Java methods.</p>
    <p>
      <ul>
        <li>
          <p><c>genKeys</c> creates a public and private key, given <m>p</m> and <m>q</m>.</p>
        </li>
        <li>
          <p><c>encrypt</c> takes a message, the public key, and <m>n</m> and returns
                        an encrypted version of the message.</p>
        </li>
        <li>
          <p><c>decrypt</c> takes the encrypted message, the private key, and <m>n</m> and
                        returns the original message.</p>
        </li>
      </ul>
    </p>

    <program language="java">
      <input>
    public static long[] genKeys(long p, long q) {
        long n = p * q;
        long m = (p - 1) * (q - 1);
        long encryptKey = (long) (Math.random() * n);
        while (gcd(m, encryptKey) != 1) {
            encryptKey = (long) (Math.random() * n);
        }
        long[] dab = extGcd(m, encryptKey);
        long decryptKey = dab[0];
        long a = dab[1];
        long b = dab[2];

        if (b &lt; 0) {
            decryptKey = m + b;
        } else {
            decryptKey = b;
        }
        return new long[]{encryptKey, decryptKey, n};
    }

    public static long[] encrypt(String msg, long encryptKey,
      long n) {
        BigInteger bigN = new BigInteger(Long.toString(n));
        int chunkSize = bigN.bitLength() / 8;

        long [] allChunks = strToChunks(msg, chunkSize);
        for (int i = 0; i &lt; allChunks.length; i++) {
            allChunks[i] = modExp(allChunks[i], encryptKey, n);
        }

        return allChunks;
    }

    public static String decrypt(long[] cipherChunks, long decryptKey,
      long n) {
        BigInteger bigN = new BigInteger(Long.toString(n));
        int chunkSize = bigN.bitLength() / 8;

        long[] plainChunks = new long[cipherChunks.length];
        for (int i = 0; i &lt; cipherChunks.length; i++) {
            plainChunks[i] = modExp(cipherChunks[i], decryptKey,
                n);
        }
        return chunksToStr(plainChunks, chunkSize);
    }
 </input>
</program>
    <p>Here is a jshell session that uses these functions to create public and private keys,
      encrypt, and decrypt as we did in the example above. The array <c>edn</c> contains the
      encryption key, decryption key, and the product of the prime numbers (n).</p>
    <console>
      <output>
jshell&gt; import rsa.TestRSA

jshell&gt; TestRSA test = new TestRSA();
test ==&gt; rsa.TestRSA@3941a79c

jshell&gt; String msg = "Java and RSA";
msg ==&gt; "Java and RSA"

jshell&gt; long [] edn = test.genKeys(5563, 8191);
edn ==&gt; long[3] { 19157743, 22783087, 45566533 }

jshell&gt; long [] encrypted = test.encrypt(msg, edn[0], edn[2]);
encrypted ==&gt; long[4] { 8033810, 24305963, 24092116, 40127463 }

jshell&gt; String decrypted = test.decrypt(encrypted, edn[1], edn[2]);
decrypted ==&gt; "Java and RSA"
          </output>
        </console>
    <p>The last thing to look at is the two helper functions that break our
                string into chunks and merge chunks into a string (<xref ref="lst_chunk"/>).
                These functions make use of Java <c>byte</c> objects, which allow us to store
                any string as a sequence of bytes.</p>
              <listing xml:id="lst_chunk">

                <program language="java" line-numbers="yes">
                  <input>
public long[] strToChunks(String msg, int chunkSize) {
    byte[] msgBytes;
    msgBytes = msg.getBytes();

    int numChunks = (msgBytes.length + chunkSize - 1) / chunkSize;
    long[] chunkList = new long[numChunks];

    int n = 0;
    String hex = "";
    for (int i = 0; i &lt; msgBytes.length; i++) {
        hex += String.format("%02x", msgBytes[i]);
        if (i % chunkSize == chunkSize - 1) {
            chunkList[n] = Long.parseLong(hex, 16);
            n++;
            hex = "";
        }
    }
    if (!hex.equals("")) {
        hex = hex + "00".repeat(chunkSize - hex.length() / 2);
        chunkList[n] = Long.parseLong(hex, 16);
    }
    return chunkList;
}

public String chunksToStr(long[] chunkList, int chunkSize) {
    byte[] byteArr = new byte[chunkList.length * chunkSize];
    int n = 0;
    for (long chunk: chunkList) {
        for (int i = 0; i &lt; chunkSize; i++) {
            byteArr[n + (chunkSize - i - 1)] =
                (byte) ((chunk >> (i * 8)) &amp; 0xff);
        }
        n += chunkSize;
    }
    return new String(byteArr);
}

                  </input>
                </program>
</listing>
    <p>In <xref ref="lst_chunk"/> we see the procedure for turning
                a string into a list of chunks. One important thing to note is that we
                must always make sure that our hexadecimal number corresponds to a
                character that is exactly two digits long. We can do this by using the
                string formatting expression <c>%02x</c> in line 11. </p>
              <p> The loop in lines 10&#x2013;17 creates a hex string of
                the given chunk size and converts it to a <c>Long</c> integer. The code in lines 18&#x2013;21
                make sure that any remaining hex bytes go into the last chunk.</p>

    <p>Transforming the decrypted chunks back to a string works by taking each decrypted chunk
      and moving its bytes into a byte array. This occurs in lines 30 and 31. The <c>&gt;&gt;</c>
      shifts the chunk to the right by the number of bits given on the right side of the operator.
      We keep only the last eight bits of the shifted value by doing a bitwise <em>and</em> (the <c>&amp;</c> operator) with eight 1-bits, which works out to hexadecimal <c>0xff</c>. The loop shifts 0 bits, then 8, then 16, etc. This extracts bytes
      from right to left. That is why line 30 has the subtraction to put the resulting bytes into the byte array in
      left to right order.</p>
    <p>In line 35, we use a <c>String</c> constructor to convert the byte array to a string.</p>
  </subsection>
</section>
