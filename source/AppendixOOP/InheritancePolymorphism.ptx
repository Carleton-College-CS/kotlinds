<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="oop_inheritance_polymorphism">
  <title>Polymorphism and Dynamic Binding</title>
  <p>
Let's return to the <c>Item</c> and <c>SaleItem</c> classes.  Try the following program and see what happens:
</p>

<listing>
  <program language="java">
    <input>
public class Polymorphism {
    public static void main(String[] args) {
        Item item1 = new Item("Cat Food", "CF-909", 7.85);
        Item item2 = new SaleItem("Lima Beans", "LB-104",
            5.95, 7.5);

        System.out.println("item 1: " + item1.toString());
        System.out.println("item 2: " + item2.toString());
    }
}
    </input>
  </program>
</listing>

<p>
The first assignment statement for <c>item1</c> is no surprise; it assigns an <c>Item</c> object to an <c>Item</c> variable. But that second assignment statement<mdash/>assigning a <c>SaleItem</c> object to an <c>Item</c> variable? How can that possibly work? What mad sorcery is this?
</p>

<p>
Remember, we're talking about an <em>is-a</em> relationship. A <c>SaleItem</c> <em>is an</em> <c>Item</c>. That's why it's legal to make the assignment. That is called <term>polymorphism</term><mdash/>the ability to assign a child class object to a parent class variable.
</p>

  <p>
Note that you can't assign a parent object to a child variable. Every <c>SaleItem</c> is an <c>Item</c>, but not every <c>Item</c> is a <c>SaleItem</c>. If you try this:
</p>

<listing>
  <program language="java">
    <input>
SaleItem badNews = new Item("Oops", "X-000", 6.66);
    </input>
  </program>
</listing>

<p>
The compiler will (correctly) complain:
</p>
<console>
<output>
Polymorphism.java:7: error: incompatible types:
  Item cannot be converted to SaleItem
        SaleItem badNews = new Item("Oops", "X-001", 6.66);
</output>
</console>

<p>
If you compile and run this program (without the bad line in it), you get this output:
</p>

<console>
<output>
item 1: Cat Food (CF-909): $7.85
item 2: Lima Beans (LB-104): $5.95 - 7.5% discount
</output>
</console>

<p>
Take a look at the <c>System.out.println</c> statements that produced that output. The first one uses <c>Item</c>'s <c>toString</c> method to print <c>item1</c> with its name, SKU, and price.  The second one uses <c>SaleItem</c>'s <c>toString</c> method to print <c>item2</c>'s name, SKU, price <em>and</em> discount rate.
</p>

<p>
But both <c>item1</c> and <c>item2</c> are <c>Item</c> objects, so how did the second <c>println</c> know to call the <c>toString</c> method from <c>SaleItem</c>?
</p>

<p>
The answer is <term>dynamic binding</term>. At compile time, both <c>item1</c> and <c>item2</c> have the <c>Item</c> data type. But at  run time, the JVM looks at the actual object that <c>item2</c> refers to and finds that it has the <c>SaleItem</c> data type, and it uses <c>SaleItem</c>'s <c>toString</c> method.
</p>

<p>
This difference between what the compiler sees and what the runtime looks at has very important consequences.
</p>

<p>
Consider <xref ref="oop_lst-polyarray"/>, which sets up an array of <c>Item</c>. Polymorphism allows some of them to be <c>Item</c> instances and others to be <c>SaleItem</c> instances:
</p>

<listing  xml:id="oop_lst-polyarray">
  <caption>Setting up an Array of Super- and SubClass Items</caption>
  <program language="java">
    <input>
public class PolyArray {
    public static void main(String[] args) {
        Item [] foods = {
            new Item("Rye Bread", "RB-010", 3.95),
            new SaleItem("Tomato Soup", "TS-882", 1.29, 0.05),
            new SaleItem("Canned Lima Beans", "CLB-104",
                2.98, 0.155),
            new SaleItem("Frozen Pizza", "FP-326",
                5.90, 0.12),
            new Item("Organic Salsa", "OS-245", 3.79)
        };
// ...
    }
}
    </input>
  </program>
</listing>

<p>
We want the program to go through the array and print each item's name and price, and, if it's a sale item, say how much the customer saves:
</p>

<console>
<output>
Rye Bread: $3.95
Tomato Soup: $1.23 - you save $0.06
Canned Lima Beans: $2.52 - you save $0.46
Frozen Pizza: $5.19 - you save $0.71
Organic Salsa: $3.79
</output>
</console>

<p>
Here's the pseudo-code for what we want to do:
</p>

<listing>
  <program language="java">
    <input>
for (Item food: foods) {
    System.out.printf("%s: ", food.getName());
    if (food is a sale item) {
        discounted price is getPrice() * (1 - getDiscount());
        amount saved is getPrice() * getDiscount();
        display discounted price and amount saved;
    } else {
        display getPrice();
    }
}
    </input>
  </program>
</listing>

<p>
Note that the <c>for</c> loop variable is an <c>Item</c>, because we have told the compiler that <c>foods</c> is an array of <c>Item</c>.  Here's the big question: how do we determine<mdash/>at run time<mdash/>if an array element is a <c>SaleItem</c> or an <c>Item</c>? We use the <c>instanceof</c> operator, which takes the form:
</p>

<listing>
  <program language="java">
    <input>
variable instanceof Class
    </input>
  </program>
</listing>

<p>
<c>instanceof</c> returns <c>true</c> if the given <c>variable</c> is an instance of <c>Class</c>; <c>false</c> otherwise.

A first try at the code looks like this:
</p>

<listing>
  <program language="java">
    <input>
for (Item food: foods) {
    System.out.printf("%s: ", food.getName());
    if (food instanceof SaleItem) {
        double amountSaved = food.getPrice() *
            food.getDiscount();
        System.out.printf("$%.2f - you saved $%.2f\n",
            food.getPrice() - amountSaved, amountSaved);
    } else {
        System.out.printf("$%.2f\n",
            food.getPrice());
    }
}
    </input>
  </program>
</listing>

<p>But when we compile, the compiler tells us:</p>

<console>
<output>
PolyArray.java:17: error: cannot find symbol
            food.getDiscount();
                ^
  symbol:   method getDiscount()
  location: variable food of type Item
</output>
</console>

<p>
  Why can't the compiler find <c>getDiscount</c>? The answer is in <c>variable food of type Item</c>. As far as the compiler is concerned, <c>food</c> is an <c>Item</c>, and that class does not have a <c>getDiscount</c> method in it.
</p>

<p>
What we have to do is use a <em>cast</em> to tell the compiler, <q>yes, we declared it as an <c>Item</c>, but please treat it as a <c>SaleItem</c></q>:
</p>

<listing>
  <program language="java">
    <input>
for (Item food: foods) {
    System.out.printf("%s: ", food.getName());
    if (food instanceof SaleItem) {
        // tell the compiler to treat food as a SaleItem
        SaleItem saleFood = (SaleItem) food;
        double amountSaved = saleFood.getPrice() *
            saleFood.getDiscount();
        System.out.printf("$%.2f - you saved $%.2f\n",
            saleFood.getPrice() - amountSaved, amountSaved);
    } else {
        System.out.printf("$%.2f\n",
            food.getPrice());
    }
}
    </input>
  </program>
</listing>

<p>
Now the compiler is happy<mdash/><c>saleFood</c> is a <c>SaleItem</c>, and that class has a <c>getDiscount</c> method.
</p>

<p>
Here's a quick summary of inheritance, polymorphism, and dynamic binding.
</p>

<p>
    <ul>
        <li><p>A subclass (the child class) extends a superclass (the parent class).</p></li>
        <li><p>A subclass constructor can call the superclass constructor by invoking the <c>super</c> method.</p></li>
        <li><p>If you use a <c>super</c> constructor, it <em>must</em> be the first non-comment line.</p></li>
        <li><p>Subclass methods can invoke the superclass methods by using <c>super.method</c> anywhere in the subclass method body.</p></li>
        <li><p>Polymorphism allows you to assign a subclass object to a superclass variable. For example,</p>

<listing>
  <program language="java">
    <input>
Item myItem = new SaleItem("Tomato Soup", "TS-882",
   1.29, 0.05);
    </input>
  </program>
</listing>
      </li>

      <li><p>At compile time, the compiler sees the superclass variable as having the superclass data type. In the preceding code, the compiler says that <c>myItem</c> has data type <c>Item</c>.</p></li>

      <li><p>At run time, the compiler uses the actual data type of the object. When you say:</p>

<listing>
  <program language="java">
    <input>
System.out.println(myItem.toString());
    </input>
  </program>
</listing>
<p>
  the JVM will see that <c>myItem</c> contains a reference to a <c>SaleItem</c> object and will invoke <c>SaleItem</c>'s <c>toString</c> method.</p></li>
  <li><p>The compiler won't let you call a method that exists only in the subclass on a superclass variable. This won't work:</p>

<listing>
  <program language="java">
    <input>
double saving = myItem.getPrice() * myItem.getDiscount();
    </input>
  </program>
</listing>

<p>
  <c>getPrice</c> is fine; that method belongs to <c>Item</c>, but <c>getDiscount</c> belongs only to the subclass.</p></li>
  <li><p>You can determine if a variable belongs to a class at run time by using the <c>instanceof</c> operator:</p>

<listing>
  <program language="java">
    <input>
if (myItem instanceof SaleItem) {
    ...
}
    </input>
  </program>
</listing>
</li>
<li><p>Once you have established that you have a variable of the subclass data type, you can convince the compiler to treat it as a subclass by using a cast:</p>

<listing>
  <program language="java">
    <input>
if (myItem instanceof SaleItem) {
    double saving = myItem.getPrice() *
        ((SaleItem) myItem).getDiscount();
}
    </input>
  </program>
</listing>

<p>The extra parentheses around the cast are required to get everything evaluated in the correct order.</p></li>
    </ul>
</p>

<exercises>
  <exercise>
    <p>This exercise will let you practice polymorphism and dynamic binding. Implement the <c>Bicycle</c>, <c>ElectricBicycle</c>, and <c>CargoBicycle</c> classes. (These are not defined in the same way as in the preceding text.) The parent <c>Bicycle</c> class has these attributes and methods:</p>

<p>
    <ul>
        <li><p><c>frameSize</c>, (in centimeters) a double, with a getter (but not a setter).</p></li>
        <li><p><c>nGears</c>, an integer, with a getter (but not a setter).</p></li>
        <li><p><c>currentGear</c>, an integer, with both a getter and setter.</p></li>
        <li><p>A constructor with two parameters for the frame size and number of gears.</p></li>
        <li><p>A <c>toString</c> method that includes frame size, number of gears, and current gear, properly labeled.</p></li>
    </ul>
</p>

<p>The <c>ElectricBicycle</c> class is a child of <c>Bicycle</c> and adds these attributes and methods:</p>

<p>
    <ul>
        <li><p><c>batteryCapacity</c> (in watt-hours), an integer, with a getter (but not a setter).</p></li>
        <li><p><c>currentCharge</c> (in watt-hours), a double, with a getter and setter.</p></li>
        <li><p>A constructor with three parameters for frame size, number of gears, and battery capacity.</p></li>
        <li><p><c>chargePercent</c>, a method that returns the percentage charge in the battery as a decimal, by dividing current charge by battery capacity.</p></li>
        <li><p>A <c>toString</c> method that includes frame size, number of gears, current gear, battery capacity, and current charge, properly labeled.</p></li>
    </ul>
</p>

<p>The <c>CargoBicycle</c> class is also a child of <c>Bicycle</c> and adds these attributes and methods:</p>

<p>
    <ul>
        <li><p><c>maxLoad</c> (in kilograms), a double, with a getter (but not a setter). This is the maximum load that the bicycle can carry.</p></li>
        <li><p><c>currentLoad</c> (in kilograms), a double, with a getter and setter.</p></li>
        <li><p>A constructor with three parameters for frame size, number of gears, and maximum cargo load.</p></li>
        <li><p><c>loadFactor</c>, a method that returns the percentage of load on the bicycle as a decimal, by dividing the current load by the maximum load.</p></li>
        <li><p>A <c>toString</c> method that includes frame size, number of gears, current gear, maximum load, and current load, properly labeled.</p></li>
    </ul>
</p>


  <figure align="center" xml:id="oop_fig-polymorphism-bikes">
    <caption>UML Diagram of <c>Bicycle</c>, <c>ElectricBicycle</c>, and <c>CargoBicycle</c></caption>
    <image source="AppendixOOP/Figures/polymorphism_bikes.png" width="60%"/>
  </figure>

  <p><xref ref="oop_fig-polymorphism-bikes"/> is the UML diagram for the three classes.</p>

    <p>Once you have implemented these classes, write a class named <c>BicycleTest</c> with a <c>main</c> method that does the following:</p>

<p>
    <ul>
        <li><p>Create an array of <c>Bicycle</c> with these bicycles:</p></li>
    <p>
    <ul>
            <li><p>A bicycle with a 55cm frame, one gear.</p></li>
            <li><p>An electric bicycle with a 57cm frame, five gears, and a battery capacity of 500 wH (watt-hours).</p></li>
            <li><p>A cargo bicycle with a 60cm frame, ten gears, and a maximum load of 35kg.</p></li>
        </ul>
</p>
        <li><p>Set the electric bicycle's current charge to 312.5 wH.</p></li>
        <li><p>Set the cargo bicycle's current load to 27.5 kg. Note: you may need to use a cast to do this step and the preceding step!</p></li>
        <li><p>Iterate through the array. For each bicycle, call the <c>toString</c> method and print the information it returns.</p></li>
    <p>
    <ul>
            <li><p>If the entry is an electric bicycle, also print out what percentage charge it has by calling the <c>chargePercent</c> method and printing its result.</p></li>
            <li><p>If the entry is a cargo bicycle, also print out what percentage of the maximum load it is carrying by calling the <c>loadFactor</c> method and printing its result.</p></li>
        </ul>
</p>
    </ul>
</p>

</exercise>

<exercise>
  <p>
This exercise will let you practice polymorphism and dynamic binding. It uses the <c>Account</c>, <c>SavingsAccount</c>, and <c>CreditCardAccount</c> classes you developed in <xref ref="oop_ex-account-inheritance"/>. Instead of creating a customer with multiple accounts, create an array of these accounts:
</p>

<p>
    <ul>

        <li><p>An <c>Account</c> number 1066 with a balance of $7,500.</p></li>
        <li><p>A <c>SavingsAccount</c> number 30507 with a balance of $4,500 and an APR of 1.5\%</p></li>
        <li><p>A <c>CreditCardAccount</c> number 51782737 with a balance of $7,000.00, APR of 8\%, and credit limit of $1000.00</p></li>
        <li><p>A <c>CreditCardAccount</c> number 629553328 with a balance of $1,500.00, an APR of 7.5\%, and a credit limit of $5,000</p></li>
        <li><p>A <c>CreditCardAccount</c> number 4977201043L with a balance of -$5,000.00, an APR of 7\%, and a credit limit of $10,000 (The <c>L</c> after the account number lets the compiler know that the account number is a <c>long</c> integer.)</p></li>
    </ul>
</p>

<p>Your program will use a loop to do the following for each account:</p>

<p>
    <ul>
        <li><p>Deposit $2,134.00</p></li>
        <li><p>Withdraw $4,782.00</p></li>
        <li><p>Print the account status using <c>toString()</c>.</p></li>
    <p>
    <ul>
        <li><p>For savings accounts, also display the annual interest</p></li>
        <li><p>For credit card accounts, also display the monthly payment</p></li>
    </ul>
</p>
    </ul>
</p>

<p>Here's what the output might look like:</p>

<console>
<output>
Account: 1066
Balance: $4852.00

Account: 30507
Balance: $1852.00
Interest Rate: 1.50%
Annual Interest: $27.78

Account: 51782737
Balance: $4352.00
Interest Rate: 8.00%
Credit Limit: $1000.00
Monthly Payment: $0.00

Account: 629553328
Balance: $-1148.00
Interest Rate: 7.50%
Credit Limit: $5000.00
Monthly Payment: $7.18

Account: 4977201043
Balance: $-7648.00
Interest Rate: 7.00%
Credit Limit: $10000.00
Monthly Payment: $20.00
</output>
</console>
</exercise>
</exercises>
</section>
