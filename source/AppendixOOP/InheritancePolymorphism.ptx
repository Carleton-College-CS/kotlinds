<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="oop_inheritance_polymorphism">
  <title>Inheritance and Polymorphism</title>
  <introduction><p>
    This is only partially converted from Python to Java.
    Deal with it.
    </p></introduction>

  <subsection xml:id="oop_inheritance-logic-gates-and-circuits">
    <title>Inheritance: Logic Gates and Circuits</title>
    <p><term>Inheritance</term> is the ability of one
      class to be related to another class in much the same way that people
      can be related to one another. Children inherit characteristics from
      their parents. Similarly, Java child classes can inherit
      characteristic data and behavior from a parent class. These classes are
      often referred to as <term>subclasses</term> and <term>superclasses</term>.</p>
    <p>
      <xref ref="fig-inherit1" /> shows parts of Java's <term>abstract windowing toolkit</term> classes and their
      relationships to one another. We call a relationship structure such as
      this an <term>inheritance hierarchy</term>. For example, the <c>ArrayList</c> is a <em>child</em> of
      the <c>AbsractList</c>. In this case, we call the ArrayList the child and
      the <em>AbstractList</em> the parent (or <em>subclass ArrayList</em> and <em>superclass AbstractList</em>). This
      is often referred to as an <term>Is-a relationship</term> (the list Is-a
      sequential collection). This implies that ArrayLists inherit important
      characteristics from AbstractList, namely the ordering of the underlying
      data and operations such as concatenation and indexing.
    </p>
    <figure align="center" xml:id="fig-inherit1">
      <caption>An Inheritance Hierarchy for Java Collections</caption>
      <image source="AppendixOOP/Figures/inheritance1_java.png" width="50%" />
    </figure>
    <p>By organizing classes in this hierarchical fashion, object-oriented
      programming languages allow previously written code to be extended to
      meet the needs of a new situation. In addition, by organizing data in
      this hierarchical manner, we can better understand the relationships
      that exist. We can be more efficient in building our abstract
      representations.</p>
    <p>To explore this idea further, we will construct a <term>simulation</term>, an
      application to simulate digital circuits. The basic building block for
      this simulation will be the logic gate. These electronic switches
      represent Boolean algebra relationships between their input and their
      output. In general, gates have a single output line. The value of the
      output is dependent on the values given on the input lines.</p>
    <p>AND gates have two input lines, each of which can be either 0 or 1
      (representing <c>false</c> or <c>true</c>, respectively). If both of the input
      lines have the value 1, the resulting output is 1. However, if either or
      both of the input lines is 0, the result is 0. OR gates also have two
      input lines and produce a 1 if one or both of the input values is a 1.
      In the case where both input lines are 0, the result is 0.</p>
    <p>NOT gates differ from the other two gates in that they have only a
      single input line. The output value is simply the opposite of the input
      value. If 0 appears on the input, 1 is produced on the output.
      Similarly, 1 produces 0.
      <xref ref="fig-truthtable" /> shows how each of these
      gates is typically represented. Each gate also has a <term>truth table</term> of
      values showing the input-to-output mapping that is performed by the
      gate.
    </p>
    <figure align="center" xml:id="fig-truthtable">
      <caption>Three Types of Logic Gates</caption>
      <image source="AppendixOOP/Figures/truthtable.png" width="50%" />
    </figure>
    <p>By combining these gates in various patterns and then applying a set of
      input values, we can build circuits that have logical functions.
      <xref ref="fig-circuit1" /> shows a circuit consisting of two AND gates, one OR
      gate, and a single NOT gate. The output lines from the two AND gates
      feed directly into the OR gate, and the resulting output from the OR
      gate is given to the NOT gate. If we apply a set of input values to the
      four input lines (two for each AND gate), the values are processed and a
      result appears at the output of the NOT gate.
      <xref ref="fig-circuit1" /> also
      shows an example with values.
    </p>
    <figure align="center" xml:id="fig-circuit1">
      <caption>A Circuit</caption>
      <image source="AppendixOOP/Figures/circuit1.png" width="50%" />
    </figure>
    <p>In order to implement a circuit, we will first build a representation
      for logic gates. Logic gates are easily organized into a class
      inheritance hierarchy as shown in
      <xref ref="fig-gates" />. At the top of the
      hierarchy, the <c>LogicGate</c> class represents the most general
      characteristics of logic gates: namely, a label for the gate and an
      output line. The next level of subclasses breaks the logic gates into
      two families, those that have one input line and those that have two.
      Below that, the specific logic functions of each appear.
    </p>
    <figure align="center" xml:id="fig-gates">
      <caption>An Inheritance Hierarchy for Logic Gates</caption>
      <image source="AppendixOOP/Figures/gates.png" width="50%" />
    </figure>
    <p>We can now start to implement the classes by starting with the most
      general, <c>LogicGate</c>. As noted earlier, each gate has a label for
      identification and a single output line. In addition, we need methods to
      allow a user of a gate to ask the gate for its label.</p>
    <p>The other behavior that every logic gate needs is the ability to know
      its output value. This will require that the gate perform the
      appropriate logic based on the current input. In order to produce
      output, the gate needs to know specifically what that logic is. This
      means calling a method to perform the logic computation. The complete
      class is shown in
      <xref ref="oop_lst-logicgateclass" />.
    </p>
    <listing xml:id="oop_lst-logicgateclass">
<program label="oop_prog-logicgateclass" language="java" line-numbers="yes">
        <input>
abstract class LogicGate {
    public String label;
    public int output;
    static final int NONE = -1;

    public LogicGate(String label) {
        this.label = label;
        this.output = NONE;
    }

    public String getLabel() {
        return this.label;
    }

    public int getOutput() {
        this.output = this.performGateLogic();
        return this.output;
    }

    public abstract int performGateLogic();

}        </input>
      </program>
    </listing>

    <p>Line one introduces a new concept: an <term>abstract</term> class. When you think about it, a logic gate is an abstraction; there are concrete types of logic gates, such as AND gates and OR gates, but we are defining here is the generic structure for <em>any</em> sort of logic gate: they need a label (a name), and they produce some output.</p>

    <p>We also have dropped the <c>public</c> specification in line one. In this program, we will put many classes in one file, and only one class<mdash/>the one containing <c>main()</c><mdash/>can be <c>public</c>.</p>

    <p>We need some way to represent a gate that has not been connected into a circuit yet and has no output. Since our outputs are integers (0 for false and 1 for true), we will use -1 to represent a gate with no output yet. Line three uses <c>final</c> to define a constant. By convention, constant names in Java are ALL_UPPER_CASE, with underscores used to separate multi-word constant names.</p>

    <p>Line three also uses <c>static</c> for this constant. A <c>static</c> property or method belongs to the class as a whole, not to any specific instance of the class. Every new logic gate we build must have its own <c>label</c> and its own <c>output</c>, but each gate doesn't need its own copy of <c>NONE</c>. That's why we make it <c>static</c>; there's one copy of <c>NONE</c> that belongs to the class as a whole, and every instance can share its use.</p>

    <p>At this point, we will not implement the <c>performGateLogic()</c> method. This is an <term>abstract</term> method because we we do not know how each gate will perform
      its own logic operation. Those details will be included by each
      individual gate that is added to the hierarchy.  Note that the definition of <c>performGateLogic()</c> has no braces or method body.</p>

    <p>Defining abstract methods is a very powerful idea in object-oriented programming. We are writing a method that will use code that does not exist yet. The parameter <c>this</c> is a reference to the actual gate object invoking the method. Any new logic gate that gets added to the hierarchy will need to implement the <c>performGateLogic()</c> method and it will be used at the appropriate time. Once done, the gate can provide its output value. This ability to extend a hierarchy that currently exists and provide the specific functionality that the hierarchy needs in order to use the new class is extremely important for reusing existing code.
    </p>

    <p>We categorized the logic gates based on the number of input lines, as shown in <xref ref="fig-gates" />: the AND gate and OR gate both have two input lines, whereas the NOT gate has only one. <c>LogicGate</c> has two subclasses: <c>BinaryGate</c>, which will add two input lines, and <c>UnaryGate</c>, which will have only a single input line. In computer circuit design, these lines are sometimes called <em>pins</em>, so we will use that terminology in our implementation.
    </p>
    <p>
      <xref ref="oop_lst-binarygateclass" /> and
      <xref ref="oop_lst-unarygateclass" /> implement these two
      classes. The constructors in both of these classes start with an
      explicit call to the constructor of the parent class by using the <c>super</c> keyword.
      method. When creating an instance of the <c>BinaryGate</c> class, we
      first want to initialize any data items that are inherited from
      <c>LogicGate</c>. In this case, that means the label for the gate. The
      constructor then goes on to add the two input lines (<c>pinA</c> and
      <c>pinB</c>). This is a very common pattern that you should always use when
      building class hierarchies. Child class constructors need to call parent
      class constructors and then move on to their own distinguishing data.
    </p>
    <listing xml:id="oop_lst-binarygateclass">
<program label="oop_prog-binarygateclass" language="java" line-numbers="yes">
        <input>
abstract class BinaryGate extends LogicGate{
    int pinA;
    int pinB;

    public BinaryGate(String label) {
        super(label);
        pinA = NONE;
        pinB = NONE;
    }

    public BinaryGate(String label, int pinA, int pinB) {
        super(label);
        this.pinA = pinA;
        this.pinB = pinB;
    }

    public int getPinA() {
        return this.pinA;
    }

    public int getPinB() {
        return this.pinB;
    }

    public void setPins(int pinA, int pinB) {
        this.pinA = pinA;
        this.pinB = pinB;
    }
}
        </input>
      </program>
    </listing>

    <p>In line one, we specify that <c>BinaryGate</c> is a subclass by saying that it <c>extends</c> the <c>LogicGate</c> class. It is still an abstract class, as it does not implement the <c>performGateLogic()</c> method.</p>

    <p>Lines 5-9 are a constructor that calls <c>super()</c> to set the label, and then sets the two connector pins to <c>NONE</c>, which is inherited from <c>LogicGate</c>.</p>

    <p>In Java, we can have multiple constructors as long as they have a different number and/or type of parameters. Thus, in lines  11-15, we have a second constructor that allows you to specify the label and the values of the two pins.</p>

    <p>The <c>setPins</c> method in lines 25-28 lets you set new values for the gate's pins without having to create a new object.</p>

    <listing xml:id="oop_lst-unarygateclass">
<program label="oop_lst-unarygateclass" language="python">
        <input>
abstract class UnaryGate extends LogicGate{
    int pin;

    public UnaryGate(String label) {
        super(label);
        pin = NONE;
    }

    public UnaryGate(String label, int pin) {
        super(label);
        this.pin = pin;
    }

    public int getPin() {
        return this.pin;
    }

    public void setPin(int pin) {
        this.pin = pin;
    }
}        </input>
      </program>
    </listing>

    <p>The only behavior that the <c>BinaryGate</c> class adds is the ability to
      get the values from the two input lines.</p>
    <p>Now that we have a general class for gates depending on the number of
      input lines, we can build specific gates that have unique behavior. For
      example, the <c>AndGate</c> class will be a subclass of <c>BinaryGate</c>
      since AND gates have two input lines. As before, the first line of the
      constructor calls upon the parent class constructor (<c>BinaryGate</c>),
      which in turn calls its parent class constructor (<c>LogicGate</c>). Note
      that the <c>AndGate</c> class does not provide any new data since it
      inherits two input lines, one output line, and a label.</p>
    <p>The only thing <c>AndGate</c> needs to add is the specific behavior that
      performs the boolean operation that was described earlier. This is the
      place where we can provide the <c>performGateLogic()</c> method. For an AND
      gate, this method first must get the two input values and then only
      return 1 if both input values are 1. The complete class is shown in
      <xref ref="oop_lst-andgateclass" />.
    </p>
    <listing xml:id="oop_lst-andgateclass">
<program label="oop_prog-andgateclass" language="java" line-numbers="yes">
        <input>
class AndGate extends BinaryGate {

    public AndGate(String label) {
        super(label);
    }

    public AndGate(String label, int pinA, int pinB) {
        super(label, pinA, pinB);
    }

    public int performGateLogic() {
        if (this.pinA == NONE || this.pinB == NONE) {
            return NONE;
        }
        else if (this.pinA == 1 &amp;&amp; this.pinB == 1) {
            return 1;
        } else {
            return 0;
        }
    }
}
        </input>
      </program>
    </listing>
    <p>In line one, we see that this is no longer an <c>abstract</c> class; a <c>LogicGate</c> and <c>BinaryGate</c> are abstract concepts; you can actually build an <c>AndGate</c>.</p>
    <p>When performing the logic for <c>AndGate</c>, lines 12-14 check to see that both pins have a valid value; if either one is <c>NONE</c>, then we pass that back as the value for the result.</p>

    <p>We can show the <c>AndGate</c> class in action by creating an instance and
      asking it to compute its output. The following session shows an
      <c>AndGate</c> object, <c>g1</c>, that has an internal label <c>"G1"</c> with a 1 on pin A and a 0 on pin B. When we
      invoke the <c>get_output</c> method, the object must first call its
      <c>perform_gate_logic</c> method which in turn queries the two input lines.
      Once the values are provided, the correct output is shown.
    </p>
    <program xml:id="and_example" language="java"><input>
public class GateExample {
    public static void main(String[] args) {
        AndGate g1 = new AndGate("G1", 1, 0);
        System.out.println(g1.getOutput());
    }
}
</input></program>
    <p>The same development can be done for OR gates and NOT gates. The
      <c>OrGate</c> class will also be a subclass of <c>BinaryGate</c> and the
      <c>NotGate</c> class will extend the <c>UnaryGate</c> class. Both of these
      classes will need to provide their own <c>performGateLogic()</c> methods,
      as this is their specific behavior.
    </p>

    <p>We can use a single gate by first constructing an instance of one of the
      gate classes and then asking the gate for its output (which will in turn
      need inputs to be provided). For example:</p>

        <program xml:id="or_example" language="java"><input>
public class GateExample {
    public static void main(String[] args) {
        OrGate g2 = new OrGate("G2", 1, 1);
        System.out.println(g2.getOutput());

        g2.setPins(0, 0);
        System.out.println(g2.getOutput());

        NotGate g3 = new NotGate("G3", 0);
        System.out.println(g3.getOutput());
    }
}
</input></program>

    <p>Now that we have the basic gates working, we can turn our attention to
      building circuits. In order to create a circuit, we need to connect
      gates together, the output of one flowing into the input of another. To
      do this, we will implement a new class called <c>Connector</c>.</p>
    <p>The <c>Connector</c> class will not reside in the gate hierarchy. It will,
      however, use the gate hierarchy in that each connector will have two
      gates, one on either end (see
      <xref ref="fig-connector" />). This relationship is
      very important in object-oriented programming. It is called the <term>Has-a
        relationship</term>. Recall earlier that we used the phrase <em>Is-a
        relationship</em> to say that a child class is related to a parent class,
      for example <c>UnaryGate</c> Is-a <c>LogicGate</c>.
    </p>
    <sage/>
    <figure align="center" xml:id="fig-connector">
      <caption>A Connector Connects the Output of One Gate to the Input of Another</caption>
      <image source="AppendixOOP/Figures/connector.png" width="50%" />
    </figure>
    <p>Now, with the <c>Connector</c> class, we say that a <c>Connector</c> Has-a
      <c>LogicGate</c>, meaning that connectors will have instances of the
      <c>LogicGate</c> class within them but are not part of the hierarchy. When
      designing classes, it is very important to distinguish between those
      that have the Is-a relationship (which requires inheritance) and those
      that have Has-a relationships (with no inheritance).
    </p>
    <p>
      <xref ref="oop_lst-connectorclass" /> shows the <c>Connector</c> class. The two gate
      instances within each connector object will be referred to as the
      <c>fromGate</c> and the <c>toGate</c>, recognizing that data values will
      flow from the output of one gate into an input line of the next. The
      call to <c>setNextPin</c> is very important for making connections (see
      <xref ref="oop_lst-setpin" />). We need to add this method to our gate classes so
      that each <c>toGate</c> can choose the proper input line for the
      connection.
    </p>
    <listing xml:id="oop_lst-connectorclass" names="lst_connectorclass">
<program label="oop_lst-connectorclass" names="lst_connectorclass"  language="python">
        <input>
        class Connector:
            def __init__(self, fgate, tgate):
                self.from_gate = fgate
                self.to_gate = tgate

                tgate.set_next_pin(self)

            def get_from(self):
                return self.from_gate

            def get_to(self):
                return self.to_gate
        </input>
      </program>
    </listing>

    <listing xml:id="oop_lst-setpin">
<program label="oop_prog-setpin" language="java">
        <input>
        def set_next_pin(self, source):
            if self.pin_a == None:
                self.pin_a = source
            else:
                if self.pin_b == None:
                    self.pin_b = source
                else:
                    raise RuntimeError("Error: NO EMPTY PINS")
        </input>
      </program>
    </listing>
    <p>In the <c>BinaryGate</c> class, for gates with two possible input lines,
      the connector must be connected to only one line. If both of them are
      available, we will choose <c>pin_a</c> by default. If <c>pin_a</c> is already
      connected, then we will choose <c>pin_b</c>. It is not possible to connect
      to a gate with no available input lines.</p>
    <p>Now it is possible to get input from two places: externally, as before,
      and from the output of a gate that is connected to that input line. This
      requires a change to the <c>get_pin_a</c> and <c>get_pin_b</c> methods (see
      <xref ref="oop_lst-newgetpin" />). If the input line is not connected to anything
      (<c>None</c>), then ask the user externally as before. However, if there is
      a connection, the connection is accessed and <c>from_gate</c>'s output value
      is retrieved. This in turn causes that gate to process its logic. This
      continues until all input is available and the final output value
      becomes the required input for the gate in question. In a sense, the
      circuit works backwards to find the input necessary to finally produce
      output.
    </p>
    <listing xml:id="oop_lst-newgetpin" names="lst_newgetpin">
<program label="oop_lst-newgetpin" names="lst_newgetpin"  language="python">
        <input>
        def get_pin_a(self):
            if self.pin_a == None:
                return input(
                    f"Enter pin A input for gate \
                    {self.get_label()}: "
                )
            else:
                return self.pin_a.get_from().get_output()
        </input>
      </program>
    </listing>
    <p>The following fragment constructs the circuit shown earlier in the
      section:</p>
    <pre>&gt;&gt;&gt; g1 = AndGate("G1")
&gt;&gt;&gt; g2 = AndGate("G2")
&gt;&gt;&gt; g3 = OrGate("G3")
&gt;&gt;&gt; g4 = NotGate("G4")
&gt;&gt;&gt; c1 = Connector(g1, g3)
&gt;&gt;&gt; c2 = Connector(g2, g3)
&gt;&gt;&gt; c3 = Connector(g3, g4)</pre>
    <p>The outputs from the two AND gates (<c>g1</c> and <c>g2</c>) are connected to
      the OR gate (<c>g3</c>) and that output is connected to the NOT gate
      (<c>g4</c>). The output from the NOT gate is the output of the entire
      circuit. For example:</p>
    <pre>&gt;&gt;&gt; g4.get_output()
Enter pin A input for gate G1: 0
Enter pin B input for gate G1: 1
Enter pin A input for gate G2: 1
Enter pin B input for gate G2: 1
0</pre>

    <p>Try it yourself using ActiveCode 4.</p>
    <program xml:id="complete_cuircuit" interactive="activecode" language="python">
      <input>
      class LogicGate:

          def __init__(self, lbl):
              self.name = lbl
              self.output = None

          def get_label(self):
              return self.name

          def get_output(self):
              self.output = self.perform_gate_logic()
              return self.output


      class BinaryGate(LogicGate):

          def __init__(self, lbl):
              super(BinaryGate, self).__init__(lbl)

              self.pin_a = None
              self.pin_b = None

          def get_pin_a(self):
              if self.pin_a == None:
                  return int(input("Enter pin A input for gate " + self.get_label() + ": "))
              else:
                  return self.pin_a.get_from().get_output()

          def get_pin_b(self):
              if self.pin_b == None:
                  return int(input("Enter pin B input for gate " + self.get_label() + ": "))
              else:
                  return self.pin_b.get_from().get_output()

          def set_next_pin(self, source):
              if self.pin_a == None:
                  self.pin_a = source
              else:
                  if self.pin_b == None:
                      self.pin_b = source
                  else:
                      print("Cannot Connect: NO EMPTY PINS on this gate")


      class AndGate(BinaryGate):

          def __init__(self, lbl):
              BinaryGate.__init__(self, lbl)

          def perform_gate_logic(self):

              a = self.get_pin_a()
              b = self.get_pin_b()
              if a == 1 and b == 1:
                  return 1
              else:
                  return 0

      class OrGate(BinaryGate):

          def __init__(self, lbl):
              BinaryGate.__init__(self, lbl)

          def perform_gate_logic(self):

              a = self.get_pin_a()
              b = self.get_pin_b()
              if a == 1 or b == 1:
                  return 1
              else:
                  return 0

      class UnaryGate(LogicGate):

          def __init__(self, lbl):
              LogicGate.__init__(self, lbl)

              self.pin = None

          def get_pin(self):
              if self.pin == None:
                  return int(input("Enter pin input for gate " + self.get_label() + ": "))
              else:
                  return self.pin.get_from().get_output()

          def set_next_pin(self, source):
              if self.pin == None:
                  self.pin = source
              else:
                  print("Cannot Connect: NO EMPTY PINS on this gate")


      class NotGate(UnaryGate):

          def __init__(self, lbl):
              UnaryGate.__init__(self, lbl)

          def perform_gate_logic(self):
              if self.get_pin():
                  return 0
              else:
                  return 1


      class Connector:

          def __init__(self, fgate, tgate):
              self.from_gate = fgate
              self.to_gate = tgate

              tgate.set_next_pin(self)

          def get_from(self):
              return self.from_gate

          def get_to(self):
              return self.to_gate


      def main():
          g1 = AndGate("G1")
          g2 = AndGate("G2")
          g3 = OrGate("G3")
          g4 = NotGate("G4")
          c1 = Connector(g1, g3)
          c2 = Connector(g2, g3)
          c3 = Connector(g3, g4)
          print(g4.get_output())

      main()
      </input>
    </program>
    <exercises>
      <title>Self Check</title>
      <p>Create a two new gate classes, one called NorGate the other called NandGate. NandGates work like AndGates that have a Not attached to the output. NorGates work lake OrGates that have a Not attached to the output.</p>
      <p>Create a series of gates that prove the following equality NOT (( A and B) or (C and D)) is that same as NOT( A and B ) and NOT (C and D). Make sure to use some of your new gates in the simulation.</p>
      <program xml:id="self_check_5" interactive="activecode" language="python">
        <input>
        class LogicGate:

            def __init__(self,n):
                self.name = n
                self.output = None

            def get_label(self):
                return self.name

            def get_output(self):
                self.output = self.perform_gate_logic()
                return self.output


        class BinaryGate(LogicGate):

            def __init__(self,n):
                LogicGate.__init__(self,n)

                self.pin_a = None
                self.pin_b = None

            def get_pin_a(self):
                if self.pin_a == None:
                    return int(input("Enter Pin A input for gate "+self.get_label()+"--&gt;"))
                else:
                    return self.pin_a.get_from().get_output()

            def get_pin_b(self):
                if self.pin_b == None:
                    return int(input("Enter Pin B input for gate "+self.get_label()+"--&gt;"))
                else:
                    return self.pin_b.get_from().get_output()

            def set_next_pin(self,source):
                if self.pin_a == None:
                    self.pin_a = source
                else:
                    if self.pin_b == None:
                        self.pin_b = source
                    else:
                        print("Cannot Connect: NO EMPTY PINS on this gate")


        class AndGate(BinaryGate):

            def __init__(self,n):
                BinaryGate.__init__(self,n)

            def perform_gate_logic(self):

                a = self.get_pin_a()
                b = self.get_pin_b()
                if a==1 and b==1:
                    return 1
                else:
                    return 0

        class OrGate(BinaryGate):

            def __init__(self,n):
                BinaryGate.__init__(self,n)

            def perform_gate_logic(self):

                a = self.get_pin_a()
                b = self.get_pin_b()
                if a ==1 or b==1:
                    return 1
                else:
                    return 0

        class UnaryGate(LogicGate):

            def __init__(self,n):
                LogicGate.__init__(self,n)

                self.pin = None

            def get_pin(self):
                if self.pin == None:
                    return int(input("Enter Pin input for gate "+self.get_label()+"--&gt;"))
                else:
                    return self.pin.get_from().get_output()

            def set_next_pin(self,source):
                if self.pin == None:
                    self.pin = source
                else:
                    print("Cannot Connect: NO EMPTY PINS on this gate")


        class NotGate(UnaryGate):

            def __init__(self,n):
                UnaryGate.__init__(self,n)

            def perform_gate_logic(self):
                if self.get_pin():
                    return 0
                else:
                    return 1


        class Connector:

            def __init__(self, fgate, tgate):
                self.from_gate = fgate
                self.to_gate = tgate

                tgate.set_next_pin(self)

            def get_from(self):
                return self.from_gate

            def get_to(self):
                return self.to_gate



        def main():
           g1 = AndGate("G1")

           print(g1.get_output())

        main()
        </input>
      </program>
    </exercises>
    <!--<video xml:id="logicgates" youtube="brrpvAlzOyM" width="auto" />-->
    <!--.. admonition:: Self  Check Challenge-->
    <!--One of the fundamental building blocks of a computer is something called a flip flop.  It's not something that computer science professors wear on their feet, but rather a kind of circuit that is stable and stores the last piece of data that was put on it.  A simple flip-flop can be made from two NOR gates that are tied together as in the following diagram.-->
    <!--.. image:: Figures/flipflop.png-->
    <!--This is a challenge problem because the entire-->
    <!--Note if the initial inputs to Reset and Set are both 0 then the output of the flip-flop is 0.  But if the Set input is toggled to 1 then the output becomes 1.  The great thing is that when the set input goes to 0 the output stays 1, until the reset input is toggled to 1 which resets the output of the circuit back to zero.-->
  </subsection>
</section>
