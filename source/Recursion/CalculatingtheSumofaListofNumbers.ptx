<?xml version="1.0"?>
<section xml:id="recursion_calculating-the-sum-of-a-list-of-numbers">
  <title>Calculating the Sum of an Array of Numbers</title>
  <p>We will begin our investigation with a problem that you already
            know how to solve without using recursion. Suppose that you want to
            calculate the sum of an array of numbers such as:
            <m>[1, 3, 5, 7, 9]</m>. An iterative method that computes the sum
            is shown in <xref ref="lst-itsum"/>. The method uses an accumulator variable
            (<c>theSum</c>) to compute a running total of all the numbers in the array
            by starting with <m>0</m> and adding each number in the array.</p>
<listing  xml:id="lst-itsum">
  <caption>Iterative Summation</caption>
  <program language="java" interactive="activecode">
    <input>
public class SumWithLoop {
    public static int arraySum(int [] numArray) {
        int theSum = 0;
        for (int number: numArray) {
            theSum = theSum + number;
        }
        return theSum;
    }

    public static void main(String[] args) {
        int[] data = {1, 3, 5, 7, 9};
        System.out.println(arraySum(data));
    }
}      </input>
  </program>
</listing>
  <p>Pretend for a minute that you do not have <c>while</c> loops or <c>for</c>
            loops. How would you compute the sum of an array of numbers? If you were a
            mathematician you might start by recalling that addition is a function
            that is defined for two operands, a pair of numbers. To redefine the
            problem from adding an array to adding pairs of numbers, we could rewrite
            the array sum as a fully parenthesized expression. Such an expression looks
            like this:</p>
  <me>((((1 + 3) + 5) + 7) + 9)</me>
  <p>We can also parenthesize
            the expression the other way around,</p>
  <me>(1 + (3 + (5 + (7 + 9))))</me>
  <p>Notice that the innermost set of
            parentheses, <m>(7 + 9)</m>, is a problem that we can solve without a
            loop or any special constructs. In fact, we can use the following
            sequence of simplifications to compute a final sum.</p>
          <md><mrow>total = \  (1 + (3 + (5 + (7 + 9))))\amp</mrow>
<mrow>total = \  (1 + (3 + (5 + 16)))\amp</mrow>
<mrow>total = \  (1 + (3 + 21))\amp</mrow>
<mrow>total = \  (1 + 24)\amp</mrow>
<mrow>total = \  25\amp</mrow></md>

  <p>How can we take this idea and turn it into a Java program? First,
            let's restate the sum problem in terms of Java arrays. In pseudo-Java notation we might say
            the sum of the list <c>numArray</c> is the sum of the first element of the
            list (<c>numArray[0]</c>) and the sum of the numbers in the rest of the
            list (<c>numArray[1...)]</c>). To state it in a functional form:</p>
  <me>arraySum(numArray) = first(numArray) + arraySum(rest(numArray))
\label{eqn:arraySum}</me>
  <p>In this equation <m>first(numArray)</m> returns the first element of
            the list and <m>rest(numArray)</m> returns a list of everything but
            the first element. We can use the <c>copyOfRange</c> method in the
            <c>java.util.Arrays</c> class to make a copy of the <q>rest of the list</q>:
            <xref ref="lst-recsum"/>.<fn><c>copyofRange</c> takes three parameters: an array,
              a starting index, and an ending index. It returns a copy of the array from the start index up to, but not including, the end index.</fn>
            </p>
<listing xml:id="lst-recsum">
  <caption>Recursive Summation</caption>
<program label="lst-recsum" language="java" line-numbers="yes" interactive="activecode">
    <input>
import java.util.Arrays;

public class SumWithRecursion {
    public static int arraySum(int [] numArray) {
        if (numArray.length == 1) {
            return numArray[0];
        } else {
            return numArray[0] +
                arraySum(Arrays.copyOfRange(numArray, 1, numArray.length));
        }
    }

    public static void main(String[] args) {
        int[] data = {1, 3, 5, 7, 9};
        System.out.println(arraySum(data));
    }
}
        </input>
  </program>
</listing>
  <p>There are a few key ideas in this listing to look at. First, on line 5 we are checking to see if the list is one element long. This check is crucial and is our escape clause from the method. The sum of an array of length 1 is trivial; it is just the number in the array. Second, on line 9 our metho calls itself! This is the reason that we call the <c>arraySum</c> algorithm recursive. A recursive method is a method that calls itself.</p>
  <p><xref ref="recursion_fig-recsumin"/> shows the series of <term>recursive calls</term> that are needed to sum the array <m>[1, 3, 5, 7, 9]</m>. You should think of this series of calls as a series of simplifications. Each time we make a recursive call we are solving a smaller problem, until we reach the point where the problem cannot get any smaller.</p>

  <figure xml:id="recursion_fig-recsumin" align="center">
    <caption>Series of Recursive Calls Adding a List of Numbers</caption>
    <image source="Recursion/Figures/sumlistIn.png" width="50%" alt="image"/>
  </figure>
  <p>When we reach the point where the problem is as simple as it can get, we
            begin to piece together the solutions of each of the small problems
            until the initial problem is solved. <xref ref="recursion_fig-recsumout"/> shows the
            additions that are performed as <c>arraySum</c> works its way backward
            through the series of calls, returning its result to the caller. When <c>arraySum</c> returns from the topmost
            problem, we have the solution to the whole problem.</p>

  <figure xml:id="recursion_fig-recsumout" align="center">
    <caption>Series of Recursive Returns from Adding a List of Numbers</caption>
    <image source="Recursion/Figures/sumlistOut.png" width="50%" alt="image"/>
  </figure>
</section>
