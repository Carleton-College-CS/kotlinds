<?xml version="1.0"?>
<section xml:id="introduction_object-oriented-programming-in-java-defining-classes">
  <title>Object-Oriented Programming in Java: Defining Classes</title>
  <introduction>
  <p>We stated earlier that Java is an object-oriented programming
    language. So far, we have used a number of built-in classes to show
    examples of data and control structures. One of the most powerful
    features in an object-oriented programming language is the ability to
    allow a programmer (problem solver) to create new classes that model
    data that is needed to solve the problem.</p>
  <p>Remember that we use abstract data types to provide the logical
    description of what a data object looks like (its state) and what it can
    do (its <term>methods</term>). By building a class that implements an abstract data
    type, a programmer can take advantage of the abstraction process and at
    the same time provide the details necessary to actually use the
    abstraction in a program. Whenever we want to implement an abstract data
    type, we will do so with a new class.</p>
</introduction>
  <subsection xml:id="introduction_a-fraction-class">
    <title>A <c>Fraction</c> Class</title>
    <p>A very common example to show the details of implementing a user-defined
      class is to construct a class to implement the abstract data type
      <c>Fraction</c>. We have already seen that Java provides a number of
      numeric classes for our use. There are times, however, that it would be
      most appropriate to be able to create data objects that look like fractions to the user.
    </p>
    <p>A fraction such as <m>\frac{3}{5}</m> consists of two parts. The top
      value, known as the numerator, can be any integer. The bottom value,
      called the denominator, can be any integer greater than 0 (negative
      fractions have a negative numerator). Although it is possible to create
      a floating point approximation for any fraction, in this case we would
      like to represent the fraction as an exact value.</p>
    <p>The operations for the <c>Fraction</c> type will allow a <c>Fraction</c> data
      object to behave like any other numeric value. We need to be able to
      add, subtract, multiply, and divide fractions. We also want to be able
      to show fractions using the standard <q>slash</q> form, for example 3/5. In
      addition, all fraction methods should return results in their lowest
      terms so that no matter what computation is performed, we always end up
      with the most common form.</p>
    <p>In Java, we define a new class by providing a name and a set of method
      definitions. For
      this example,</p>
    <pre>public class Fraction {
  // properties and methods go here
  }</pre>

<p>provides the framework for us to define the class. We normally start off by specifying the class's properties. These are declared inside the class, but not inside any method.</p>
      <program language="java"><input>
public class Fraction {
    int numerator;
    int denominator;
}
</input></program>

<p>If you do not initialize properties, the default values will be 0 for <c>int</c>, 0.0 for <c>double</c>, <c>false</c> for <c>boolean</c>, and <c>null</c> for reference types such as <c>String</c>.</p>

<p>Next, we define a <term>constructor</term>. The constructor defines the way in which objects are created. To create a
      <c>Fraction</c> object, we will need to provide two pieces of data, the
      numerator and the denominator. In Java, the constructor method has the same name as the class. Unlike other methods, which have a return value (or <c>void</c>), constructors do <em>not</em> have a return type:

    <listing xml:id="introduction_listing-frac-constructor">
<program label="introduction_frac-onstructor" language="java" line-numbers="yes">
        <input>
public class Fraction {
    int numerator;
    int denominator;

    public Fraction(int numerator, int denominator) {
        this.numerator = numerator;
        this.denominator = denominator;
    }
}
        </input>
      </program>
    </listing>
    <p>In line 5, you see that we have named the constructor parameters the same as the properties. That is why, on lines 6 and 7, , we use the keyword <c>this</c> to <term>qualify</term> the variables on the left hand side of the assignment. You can think of <c>this</c> as meaning <q>the object currently under consideration</q>.  Thus, <c>this.numerator&#160;=&#160;numerator;</c> means <q>assign the <c>numerator</c> parameter to the <c>numerator</c> property of the object currently being constructed</q>.</p>
    </p>
    <p>To create an instance of the <c>Fraction</c> class, we must invoke the
      constructor. This happens by using the <c>new</c> operator with the name of the class and passing
      actual values for the necessary properties. For example,
    </p>
    <pre>Fraction myFraction = new Fraction(3, 5);</pre>
    <p>creates an object called <c>myFraction</c> representing the fraction
      <m>\frac {3}{5}</m> (three-fifths).
      <xref ref="fig-fraction1" /> shows this
      object as it is now implemented.
    </p>
    <figure align="center" xml:id="fig-fraction1">
      <caption>An Instance of the <literal>Fraction</literal> Class</caption>
      <image source="Introduction/Figures/fraction_properties.png" width="50%" />
    </figure>
  </subsection>

  <subsection xml:id="introduction_printing_fraction">
    <title>Printing a Fraction</title>
    <p>The next thing we need to do is implement the behavior that the data type requires. To begin, consider what happens when we try to print a <c>Fraction</c> object.</p>

    <program language="java"><input>
    public static void main(String[] args) {
        Fraction myFraction = new Fraction(3, 5);
        System.out.println(myFraction);
    }
    </input></program>

<p>We get this output:</p>
<console><output>Fraction@1dbd16a6</output></console>
    <p>The <c>Fraction</c> object, <c>myFraction</c>, does not know how to respond to this
      request to print. The <c>print</c> function requires that the object
      convert itself into a string so that the string can be written to the
      output. The default method gives us the class name and the memory address of the reference. This is not what we
      want.</p>
    <p>There are two ways we can solve this problem. One is to define a method
      called <c>show</c> that will allow the <c>Fraction</c> object to print itself
      as a string. Unfortunately, writing a <c>show()</c> method does not work in general. In order to make
      printing work properly, we need to override Java's default method for converting a <c>Fraction</c> to a string. We do this by writing a method named <c>toString()</c> that has no parameters and returns a <c>String</c>:</p>

    <listing xml:id="introduction_lst-toString">
<program label="introduction_prog-toString" language="java">
        <input>
public String toString() {
  return String.format("%d/%d", this.numerator, this.denominator);
}
        </input>
      </program>
    </listing>

    <p>This method uses <c>String.format()</c>, which works exactly like <c>System.out.format()</c>, except that the result goes into a String variable rather than out to the screen. We don't include the <c>%n</c> here; whoever calls <c>toString()</c> will be responsible for outputting a newline (or not).</p>

    <p>Once we add this method and recompile, the output gives us <c>3/5</c>.</p>

    <p>It is important to note that the <c>toString</c> method doesn't have parameters. It doesn't need any extra information beause it builds the string representation by using the object's internal state data to <q>fill in the blanks</q> in the format string.</p>

  </subsection>
  <subsection xml:id="introduction_add_fraction">
    <title>Adding Fractions</title>
    <p>Let us now turn our attention to adding two fractions. We will write a method called <c>add</c>, which will add the fraction that we are currently working with to another fraction.  Two fractions must have the same denominator to be added. The easiest
      way to make sure they have the same denominator is to use the
      product of the two denominators as a common denominator so that
      <m>\frac {a}{b} + \frac {c}{d} = \frac {ad}{bd} + \frac {cb}{bd} = \frac{ad+cb}{bd}</m>.
      The implementation is shown in
      <xref ref="introduction_lst-addmethod" />.
    </p>
 <listing xml:id="introduction_lst-addmethod">
<program label="introduction_prog-addmethod" language="java" line-numbers="yes">
        <input>
public Fraction add(Fraction other) {
    int newNumerator = this.numerator * other.denominator +
          this.denominator * other.numerator;
    int newDenominator = this.denominator * other.denominator;
    return new Fraction(newNumerator, newDenominator);
}
        </input>
      </program>
    </listing>

    <p>
     The addition
      function returns a new <c>Fraction</c> object with the numerator and
      denominator of the sum. We can use this method by writing a standard
      arithmetic expression involving fractions, assigning the result of the
      addition, and then printing our result.
    </p>

    <p>
      Let's add this code to our <c>main()</c> method to test addition:
    </p>

    <pre>Fraction f1 = new Fraction(1, 4);
Fraction f2 = new Fraction(1, 2);
Fraction f3 = f1.add(f2);
System.out.println(f3);
</pre>

<p>On the third line, the call <c>f1.add(f2)</c> will use <c>f1</c> as <c>this</c> (the object we are currently working with), and <c>f2</c> will be the value for the formal parameter <c>other</c>.</p>

    <p>The addition method works as we desire, but one thing could be better.
      Note that <m>6/8</m> is the correct result
      (<m>\frac {1}{4} + \frac {1}{2}</m>) but that it is not in the
      <q>lowest terms</q> representation. The best representation would be
      <m>3/4</m>. In order to be sure that our results are always in the
      lowest terms, we need a helper function that knows how to reduce
      fractions. This function will need to look for the greatest common
      divisor, or GCD. We can then divide the numerator and the denominator by
      the GCD and the result will be reduced to lowest terms.
    </p>
    <p>The best-known algorithm for finding the greatest common divisor is
      Euclid's algorithm, which will be discussed in detail in Chapter 8.
      It states that the greatest common divisor of two
      integers <m>m</m> and <m>n</m> is <m>n</m> if <m>n</m>
      divides <m>m</m> evenly. However, if <m>n</m> does not divide
      <m>m</m> evenly, then the answer is the greatest common divisor of
      <m>n</m> and the remainder of <m>m</m> divided by <m>n</m>. We
      will provide an iterative implementation here (see
      <xref ref="gcd_cl" />). Note that this implementation of the GCD algorithm
      works only when the denominator is positive. This is acceptable for our
      fraction class because we have said that a negative fraction will be
      represented by a negative numerator.
    </p>
    <listing xml:id="gcd_cl" >
    <program label="gcd_cl" language="java">
      <input>
public int gcd(int m, int n) {
    while (m % n != 0) {
        int saveM = m;
        m = n;
        n = saveM % n;
    }
    return n;
}
      </input>
    </program>
    </listing>

    <p>Now we can use this function to help reduce any fraction. To put a
      fraction in lowest terms, we will divide the numerator and the
      denominator by their greatest common divisor. So, for the fraction
      <m>6/8</m>, the greatest common divisor is 2. Dividing the top and
      the bottom by 2 creates a new fraction, <m>3/4</m> (see
      <xref ref="introduction_lst-newaddmethod" />).
    </p>
    <listing xml:id="introduction_lst-newaddmethod">
<program label="introduction_prog-newaddmethod" language="java">
        <input>
public Fraction add(Fraction other) {
    int newNumerator = this.numerator * other.denominator +
            this.denominator * other.numerator;
    int newDenominator = this.denominator * other.denominator;

    int common = gcd(newNumerator, newDenominator);

    return new Fraction(newNumerator / common,
        newDenominator / common);
}
        </input>
      </program>
    </listing>

    <p>Our <c>Fraction</c> object now has two very useful methods as depicted in
      <xref ref="i19_id2fig-fraction2" />.
    </p>
    <figure align="center" xml:id="i19_id2fig-fraction2">
      <caption>An Instance of the <literal>Fraction</literal> Class with Two Methods</caption>
      <image source="Introduction/Figures/fraction2.png" width="50%" />
    </figure>

  </subsection>
  <subsection xml:id="introduction_compare_fraction">
    <title>Comparing Fractions</title>
    <p>An additional method that we need to
      include in our example <c>Fraction</c> class will allow two fractions to
      compare themselves to one another. Consider this code:</p>

    <program language="java"><input>
Fraction f4 = new Fraction(3, 5);
Fraction f5 = f4;
Fraction f6 = new Fraction(3, 5);

System.out.println(f4 == f5);
System.out.println(f4 == f6);
</input></program>

<p>The assignment <c>f5 = f4</c> copies the <em>reference</em> for <c>f4</c> into <c>f5</c>; we now have two references to the same object in memory. <c>f6</c>, on the other hand, refers to a completely different area of memory, as depicted in <xref ref="fig-fraction3"/>. When we do the comparison <c>f4&#160;==&#160;f5</c>, the <c>==</c> operator does a <term>shallow equality</term> comparison: it only checks to see that the references are the same, and evaluates as <c>true</c>. The shallow comparison <c>f4&#160;==&#160;f6</c> will evaluate as <c>false</c> because the references are not the same.
    </p>
    <figure align="center" xml:id="fig-fraction3">
      <caption>Shallow Equality Versus Deep Equality</caption>
      <image source="Introduction/Figures/fraction3.png" width="50%" />
    </figure>
    <p>We can create <term>deep equality</term>&#x2013;equality by the
      same value, not the same reference&#x2013;by implementing an <c>equals()</c>
      method (see
      <xref ref="fig-fraction3" />). This method will compare the <em>contents</em> of the objects (in their state), not merely their references,
    </p>
    <p>In the <c>Fraction</c> class, we can implement the <c>equals</c> method by
      again putting the two fractions in common terms and then comparing the
      numerators (see
      <xref ref="introduction_lst-cmpmethod" />).
    </p>
    <listing xml:id="introduction_lst-cmpmethod">
<program label="introduction_prog-cmpmethod" language="java">
        <input>
public boolean equals(Fraction other) {
    int product1 = this.numerator * other.denominator;
    int product2 = this.denominator * other.numerator;

    return product1 == product2;
}
</input></program>

    </listing>
    <p>If we now evaluate <c>f4.equals(f6)</c>, the <c>equals()</c> method will do a deep equality comparison and evalute as <c>true</c>.</p>

  </subsection>
  <subsection xml:id="introduction_static_method">
    <title>Adding Fractions with a static Method</title>
    <p>Perhaps you found the way we added fractions: <c>f1.add(f2)</c> to be a bit strange. As it currently stands, <c>add</c> is an <term>instance method</term>; we need to invoke <c>add</c> on an instance of the <c>Fraction</c> class (in our example, that is <c>f1</c>).
    </p>
    <p>What if you wanted a more <q>conventional</q> way of adding fractions, such as this code fragment:</p>
    <program language="java"><input>
Fraction f7 = new Fraction(1, 2);
Fraction f8 = new Fraction(1, 3);
Fraction f9 = add(f7, f8);
System.out.println(f9);
</input></program>

<p>We want this new <c>add</c> method to also belong to the <c>Fraction</c> class, but <em>not</em> require dot notation. We can do this by making a <c>static</c> method<mdash/>it belongs to the class as a whole, not to any particular instance:</p>

<program language="java"><input>
public static Fraction add(Fraction fracA, Fraction fracB) {
    return fracA.add(fracB);
}
</input></program>

<p>To save duplication of code, we will have this new <c>add</c> method invoke the instance <c>add</c> method with <c>fracA</c> as the instance and <c>fracB</c> as the argument.</p>

<p>Now we have two methods with the same name. Java allows this, as long as the number of parameters and type of parameters are different. This is called <term>overloading</term> a method. There's no conflict here; when Java encounters <c>fracA.add(fracB)</c>, it will use the instance method that has one parameter instead of calling the two-argument method that is already in progress.
</p>
<aside><p>A method <em>can</em> call itself; this is called <term>recursion</term>, and it is the topic of <xref ref="chapter_recursion"/>, but that's not what we want here!</p></aside>

<p>We can now complete our code fragment with one additional change: because our two-argument <c>add</c> method belongs to the class, we must prefix it with the class name:</p>

    <program language="java"><input>
Fraction f7 = new Fraction(1, 2);
Fraction f8 = new Fraction(1, 3);
Fraction f9 = Fraction.add(f7, f8);
System.out.println(f9);
</input></program>

  </subsection>
  <subsection xml:id="introduction_object_summary">
    <title>Summary</title>

    <p>The complete <c>Fraction</c> class, up to this point, is shown in
      <xref ref="lst-fractioncode" />.
    </p>
    <listing xml:id="lst-fractioncode">
<program label="prog-fractioncode" language="java">
      <input>
class Fraction {

    int numerator;
    int denominator;

    public Fraction(int numerator, int denominator) {
        this.numerator = numerator;
        this.denominator = denominator;
    }

    public int gcd(int m, int n) {
        while (m % n != 0) {
            int saveM = m;
            m = n;
            n = saveM % n;
        }
        return n;
    }

    public Fraction add(Fraction other) {
        int newNumerator = this.numerator * other.denominator +
                this.denominator * other.numerator;
        int newDenominator = this.denominator * other.denominator;

        int common = gcd(newNumerator, newDenominator);

        return new Fraction(newNumerator / common,
            newDenominator / common);
    }

    public String toString() {
      return String.format("%d/%d", this.numerator, this.denominator);
    }

    public boolean equals(Fraction other) {
        int product1 = this.numerator * other.denominator;
        int product2 = this.denominator * other.numerator;

        return product1 == product2;
    }

    public static void main(String[] args) {
        Fraction myFraction = new Fraction(3, 5);
        System.out.println(myFraction);

        Fraction f1 = new Fraction(1, 4);
        Fraction f2 = new Fraction(1, 2);
        Fraction f3 = f1.add(f2);
        System.out.println(f3);

        Fraction f4 = new Fraction(3, 5);
        Fraction f5 = f4;
        Fraction f6 = new Fraction(3, 5);
        System.out.println(f4 == f5);       // shallow compare is true
        System.out.println(f4 == f6);       // but references aren't same
        System.out.println(f4.equals(f5)); // deep compare is true
        System.out.println(f4.equals(f6)); // and here also.

        Fraction f7 = new Fraction(1, 2);
        Fraction f8 = new Fraction(1, 3);
        Fraction f9 = add(f7, f8);
        System.out.println(f9);
    }
}
      </input>
    </program>
    </listing>

    <p>This is what you need to know to create the classes we will use in this book. This is, after all, a review of <em>basic</em> Java, and our goal is to teach you data structures, not Java. However, if you want to write more advanced object-oriented Java, you will need to know about the concepts of inheritance, polymorphism, interfaces, and composition. See <xref ref="appendix_oop"/> for an overview of these concepts.</p>

    <exercises>
      <title>Self Check</title>
      <p>To make sure you understand how methods work in Java classes, write some methods to implement <c>subtract()</c>, <c>multiply()</c>, and <c>divide()</c>. Also implement a method named <c>compareTo()</c>, which compares <c>this</c> to some <c>other</c> fraction (thus, the method will have only <em>one</em> parameter). Your method will return -1 if <c>this</c> is less than <c>other</c>, 0 if <c>this</c> is equal to <c>other</c>, and 1 if <c>this</c> is greater than <c>other</c>.</p>
    </exercises>
    <!--<video xml:id="fraction" youtube="gFb9tvJZHXo" width="auto" />-->
  </subsection>

</section>
