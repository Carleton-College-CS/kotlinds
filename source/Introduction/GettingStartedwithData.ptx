<?xml version="1.0"?>
<section xml:id="introduction_getting-started-with-data">
  <title>Getting Started with Data</title>
  <introduction>
    <p>We stated in <xref ref="introduction_review-of-basic-java"/> that Java supports the object-oriented programming
            paradigm. This means that Java considers data to be the focal point of
            the problem-solving process. In Java, as well as in any other
            object-oriented programming language, we define a <term>class</term> to be a
            description of what the data look like (the state) and what the data can
            do (the behavior). Classes are analogous to abstract data types because
            a user of a class only sees the state and behavior of a data item. Data
            items are called <term>objects</term> in the object-oriented paradigm. An object
            is an instance of a class.</p>
        </introduction>
  <subsection xml:id="introduction_primitive-data-types">
    <title>Primitive Data Types</title>
    <p>We will begin our review by considering the <term>primitive</term> data types. Java
                has two main built-in numeric data types that implement integers and
                floating-point values. These Python classes are called <c>int</c> and
                <c>double</c>. The standard arithmetic operators, +, -, *, and / can be used with parentheses forcing the order of
                operations away from normal operator precedence. Another very useful
                operator is the remainder (modulo) operator (%).
                Note that when two integers are divided, the result is an integer.
              </p>
              <p>To do exponentiation, you use the built-in <c>Math.pow()</c> method, which always yields a <c>double</c> result.</p>
              <p>
                The folllowing listing shows some arithmetic expressions and their results.
                The <c>//</c> introduces a Java <term>comment</term>; Java ignores everything from
                the <c>//</c> to the end of the line.
                point.</p>
    <program xml:id="intro_1" language="java">
      <input>
2 + 3 * 4        // 14
(2 + 3) * 4      // 20
Math.pow(2, 10)  // 1024.0
8 / 4            // 2
11 / 4           // 2
11.0 / 4         // 2.75
11 % 4           // 3
3 / 6            // 0
Math.pow(2, 100) // 1.2676506002282294E30
        </input>
    </program>

    <p>The Boolean data type, implemented as the Java <c>boolean</c> atomic data type, is
    quite useful for representing truth values. The possible values
    for a <c>boolean</c> variable are <c>true</c> and <c>false</c>, with the standard
    Boolean operators, <c>&amp;&amp;</c> (and), <c>||</c> (or), and <c>!</c> (not).</p>

    <p>Boolean values are also used as results for comparison operators such as equality (==) and greater than (<m>&gt;</m>). In addition, relational operators and logical operators can be combined together to form complex logical expressions. <xref ref="introduction_tab-relational"/> shows the relational and logical operators.</p>

    <table xml:id="introduction_tab-relational">
      <tabular>
        <title>
          Table 1: Relational and Logical Operators
        </title>
        <row header="yes">
          <cell>Operation Name</cell>
          <cell>Operator</cell>
          <cell>Explanation</cell>
        </row>
        <row>
          <cell>less than</cell>
          <cell><c>&lt;</c></cell>
          <cell>Less than operator</cell>
        </row>
        <row>
          <cell>greater than</cell>
          <cell><c>&gt;</c></cell>
          <cell>Greater than operator</cell>
        </row>
        <row>
          <cell>less than or equal</cell>
          <cell><c>&lt;=</c></cell>
          <cell>Less than or equal to operator</cell>
        </row>
        <row>
          <cell>greater than or equal</cell>
          <cell><c>&gt;=</c></cell>
          <cell>Greater than or equal to operator</cell>
        </row>
        <row>
          <cell>equal</cell>
          <cell><c>==</c></cell>
          <cell>Equality operator</cell>
        </row>
        <row>
          <cell>not equal</cell>
          <cell><c>!=</c></cell>
          <cell>Not equal operator</cell>
        </row>
        <row>
          <cell>logical and</cell>
          <cell><c>&amp;&amp;</c></cell>
          <cell>Both operands true for result to be true</cell>
        </row>
        <row>
          <cell>logical or</cell>
          <cell><c>||</c></cell>
          <cell>One or the other operand is true for the result to be true</cell>
        </row>
        <row>
          <cell>logical not</cell>
          <cell><c>!</c></cell>
          <cell>Negates the truth value, false becomes true, true becomes false</cell>
        </row>
      </tabular>
    </table>

    <p>Here are examples of boolean expressions using these operators. Notice that, in the last example, you <em>must</em> fully write out both conditions; unlike some languages, you cannot write it as <c>2 &lt; 7 &lt; 12</c>.</p>

    <program xml:id="intro_2" language="java">
      <input>
5 == 10                   // false
10 &gt; 5                    // true
(5 &gt;= 1) &amp;&amp; (5 &lt;= 10)     // true
(1 &lt; 5) || (10 &lt; 1)       // true
(2 &lt; 7) &amp;&amp; (7 &lt; 12)       // true
        </input>
    </program>

    <p>Identifiers are used in programming languages as names. In Java, identifiers consist of a sequence of Unicode letters, digits, dollar sign ($), or underscore (_). The first character must be a letter, dollar sign ($), or an underscore (_). Identifiers are case sensitive and can be of any length. Remember that it is always a good idea to use names that convey meaning so that your program code is easier to read and understand.</p>

    <p>By convention, Java names consisting of more than one word use <term>camel case</term>, where the first word of the name starts with a lower case letter and the first letter of subsequent words are capitalized, such as <c>salesTax</c> and <c>partsPerMillion</c>.</p>

      <p>In Java, you must <term>declare</term> a variable before you use it. You declare a variable by putting the data type before the variable name.  Assignment statements provide a way to associate a name with a value. The variable will hold the data specified on the right-hand side of the assignment operator (<c>=</c>). Consider the following session:</p>


    <pre>jshell> int theSum = 0;
theSum ==> 0

jshell> theSum = theSum + 1;
theSum ==> 1

jshell> theSum = true;
|  Error:
|  incompatible types: boolean cannot be converted to int
|  theSum = true;
|           ^--^

jshell> double doubleSum = theSum;
doubleSum ==> 1.0

</pre>
    <p>The assignment statement <c>theSum = 0;</c> creates an integer variable called
                <c>theSum</c> and lets it hold the value <c>0</c> (see
                <xref ref="fig-assignment1"/>). In general, the right-hand side of the assignment
                statement is evaluated and the resulting value is
                assigned to the name on the left-hand side. In the second statement, the right-hand side gets the current value of <c>theSum</c> (zero) and adds one; the resulting value is re-assigned as the value of the variable (see <xref ref="fig-assignment2"/>) Once you declare a variable's data type, Java will not let you assign an
                incompatible data type (the third assignment).  In the last example, you can see
                that a compatible data type (<c>double</c> values are compatible with <c>int</c>) is
                allowed, and Java implicitly converts the integer value to floating point.</p>

    <figure align="center" xml:id="fig-assignment1">
      <caption>Primitive Data Type Variables Hold Values</caption>
      <image source="Introduction/Figures/assignment1.png" width="20%"/>
    </figure>
    <figure align="center" xml:id="fig-assignment2">
      <caption>Assignment Changes the Value</caption>
      <image source="Introduction/Figures/assignment2.png" width="20%"/>
    </figure>

    <p>The final primitive data type that we want to introduce is <c>char</c>, which contains a single 16-bit Unicode character.</p>
  </subsection>

  <subsection xml:id="introduction_strings">
    <title>Strings</title>
     <p>In addition to the numeric and boolean types, Java has a number of
       data types which are <term>objects</term>.  In Java, as well as in any other object-oriented programming language, we define a <term>class</term> to be a description of what the data look like (the state) and what the data can do (the behavior). Classes are analogous to abstract data types because a user of a class only sees the state and behavior of a data item. Data items are called objects in the object-oriented paradigm. An object is an <term>instance</term> of a class.</p>
     <p>Unlike primitive data types, where a variable stores the data value, objects are <term>reference types</term>. An object does not contain the state; it refers to the area of memory where the data resides.  For example, in this string declaration:</p>

     <pre>String word = "computer";</pre>

     <p>you can visualize the reference as in <xref ref="fig-reference1"/>:</p>

         <figure align="center" xml:id="fig-reference1">
      <caption>A String is a reference type</caption>
      <image source="Introduction/Figures/reference1.png" width="50%"/>
    </figure>

    <p>Notice that the data type <c>String</c> starts with a capital letter. By convention, all class names in Java begin with a capital letter. To invoke an object's <term>method</term> (its behavior) or a <term>field</term> (its state), you use <term>dot notation</term>: give the variable name, then a dot, then the method or field desired. For example, to find the length of a String, you use the <c>length()</c> method:</p>

    <pre>jshell> String word = "computer";
word ==> "computer"

jshell> word.length()
$2 ==> 8
      </pre>

      <p>The <c>+</c> operator allows you to <term>concatenate</term> Strings. When concatenating a number with a String, the number will be converted to a String. Note that the order of operations is important:</p>

      <pre>jshell> String word2 = "door" + "bell";
word2 ==> "doorbell"

jshell> String word3 = 40 + 36 + " trombones"; // numeric addition first
word3 ==> "76 trombones"

jshell> String word4 = "eyesight " + 20 + 20; // all String concatenation
word4 ==> "eyesight 2020"</pre>

    <p>Some of the methods available for Strings are shown in <xref ref="introduction_tab-stringmethods"/>.</p>
    <table xml:id="introduction_tab-stringmethods">
      <tabular>
        <title>
          Table 4: Methods Provided by the Java String Class
        </title>
        <row header="yes">
          <cell>Method Name</cell>
          <cell>Use</cell>
          <cell>Explanation</cell>
        </row>
        <row>
          <cell><c>length</c></cell>
          <cell><c>str.length()</c></cell>
          <cell>Returns the number of characters in the string</cell>
        </row>
        <row>
          <cell><c>charAt</c></cell>
          <cell><c>str.charAt(index)</c></cell>
          <cell>Returns the character at the given index. This returns a <c>char</c> primitive, not a <c>String</c>.</cell>
        </row>
        <row>
          <cell><c>substring(start, end)</c></cell>
          <cell><c>str.substring(s, e)</c></cell>
          <cell>Returns the portion of the string starting at given start index up to <em>but not including</em> the end index</cell>
        </row>
        <row>
          <cell><c>substring(start)</c></cell>
          <cell><c>str.substring(s)</c></cell>
          <cell>Returns the portion of the string starting at given start index to the end of the string</cell>
        </row>
        <row>
          <cell><c>toLowerCase</c></cell>
          <cell><c>str.toLowerCase()</c></cell>
          <cell>Returns the string with all letters in lower case</cell>
        </row>
        <row>
          <cell><c>toUpperCase</c></cell>
          <cell><c>str.toUpperCase()</c></cell>
          <cell>Returns the string with all letters in upper case</cell>
        </row>
        <row>
          <cell><c>strip</c></cell>
          <cell><c>str.strip()</c></cell>
          <cell>Returns a string with all leading and trailing whitespace removed</cell>
        </row>
        <row>
          <cell><c>split</c></cell>
          <cell><c>str.split(delimiter_str)</c></cell>
          <cell>Splits a string into an array of substrings at <c>delimiter_str</c></cell>
        </row>
      </tabular>
    </table>
    <p>Of these, <c>split</c> will be very useful for processing data. <c>split</c>
                will take a string and return an array of strings using the split
                delimiter as a division point. The first example uses <q>-</q> as the delimiter; the second uses a semicolon followed by a space as the delimiter.</p>
    <pre>jshell> String s1 = "1900-05-07";
s1 ==> "1900-05-07"

jshell> s1.split("-")
$2 ==> String[3] { "1900", "05", "07" }

jshell> String s2 = "abc, de, fghi";
s2 ==> "abc, de, fghi"

jshell> s2.split(", ");
$3 ==> String[3] { "abc", "de", "fghi" }</pre>

      <p>
        Because strings in Java are objects, you cannot use the <c>==</c> operator to compare them. The <c>==</c> operator will test to see if the <em>references</em> are equal, not the contents of the strings themselves, as in this jshell session:
      </p>

      <console><output>
jshell&gt; String word1 = "cat";
word1 ==&gt; "cat"

jshell&gt; String word2 = "catalog".substring(0, 3);
word2 ==&gt; "cat"

jshell&gt; word1 == word2
$1 ==&gt; false
          </output></console>

      <p>To compare the actual content of the strings, you must use the <c>equals</c> method:</p>

      <console><output>
jshell&gt; word1.equals(word2)
$2 ==&gt; true
</output></console>

      <p>Similarly, you cannot use <c>&lt;</c> and <c>&gt;</c> to compare strings:</p>
      <console><output>
jshell&gt; word1 &gt; word2
|  Error:
|  bad operand types for binary operator '&gt;'
|    first type:  java.lang.String
|    second type: java.lang.String
|  word1 &gt; word2
|  ^-----------^
</output></console>

<p>Instead, you must use the <c>compareTo</c> method.  Given String variables <c>a</c> and <c>b</c>, the expression <c>a.compareTo(b)</c> returns:</p>

  <p>
    <ul>
      <li><p>A negative number if <c>a</c> lexicographically precedes (comes before) <c>b</c></p></li>
      <li><p>Zero if <c>a</c> and <c>b</c> have the same value</p></li>
      <li><p>A positive number if <c>a</c> lexicographically folllows <c>b</c></p></li>
    </ul>
  </p>

  <console><output>
jshell&gt; String word1 = "cat";
word1 ==&gt; "cat"

jshell&gt; String word2 = "elk";
word2 ==&gt; "elk"

jshell&gt; String word3 = "gnu";
word3 ==&gt; "gnu"

jshell&gt; word1.compareTo(word3)
$15 ==&gt; -4

jshell&gt; word3.compareTo(word2)
$16 ==&gt; 2
</output></console>
    </subsection>

  <subsection xml:id="introduction_arrays">
    <title>Arrays</title>

    <p>An <term>array</term> is an ordered collection of zero or more primitves or other objects. To declare an array, you follow the data type with a pair of square brackets <c>[]</c>. You can initialize an array by assigning a comma-separated list of values enclosed in braces <c>{}</c>:</p>

    <pre>int[] ages = {32, 47, 19, 62};
double[] prices = {12.95, 13.88, 10.66};
String[] words = {"ant", "bee", "cat", "dog", "elk"};</pre>

<p><xref ref="fig-arrays"/> shows a diagram of the references in the preceding array declarations.</p>

           <figure align="center" xml:id="fig-arrays">
      <caption>Arrays are References</caption>
      <image source="Introduction/Figures/array_diagram.png" width="50%"/>
    </figure>

<p>Unlike primitive values, arrays are a <term>reference</term> data type. The variable name does not contain the data; it contains a reference to where the data is stored in memory.</p>

<p>You can also declare an array with the <c>new</c> operator, giving the data type and, in brackets, the number of items you want in the array. (This number can be in a variable or expression.) The items in the array will be given the appropriate default value for their data type. For objects such as <c>String</c>, the default value is <c>null</c>, which means the element does not refer to any value.</p>

<console prompt="jshell&gt; ">
<input>int[] ages = new int[3];</input>
<output>ages ==> int[3] { 0, 0, 0 }
&#160;

</output>
<input>double[] prices = new double[3];</input>
<output>prices ==> double[4] { 0.0, 0.0, 0.0 }
&#160;

</output>
<input>boolean[] valid = new boolean[3];</input>
<output>valid ==> boolean[3] { false, false, false }
&#160;

</output>
<input>String[] words = new String[3];</input>
<output>words ==> String[3] { null, null, null }
</output>
      </console>

      <p>Arrays have a fixed number of elements; they cannot shrink or expand without doing a lot of extra work. To get around this problem, we need to investigate Java collections.</p>
  </subsection>
</section>
