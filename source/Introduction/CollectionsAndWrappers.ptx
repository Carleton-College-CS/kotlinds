<?xml version="1.0"?>
<section xml:id="introduction_collections-and-wrappers">
  <title>Collections and Wrapper Classes</title>
  <introduction>
  <p>While fixed-length arrays are very efficient, we will need to have array-like containers that allow us to easily add and delete elements. Java provides a large number of <term>collections</term>, some of which implement the data structures we will be looking at in this book. (We'll be implementing our own versions of these data structures rather than relying on the ones that Java gives us.)</p>
        </introduction>
  <subsection xml:id="introduction_arraylist" label="introduction_arraylist">
    <title>The ArrayList Class</title>
    <p>The primary collection we'll be using is the <c>ArrayList</c>. It's not one of the built-in data types, so you have to explicitly import it:</p>
    <console prompt="jshell&gt; ">
    <input>import java.util.ArrayList;</input>
    </console>
    <p>Here, <c>ArrayList</c> is the name of the class. It belongs to the <c>java.util</c> <term>package</term>. Java uses packages to group together related data types.</p>

    <p>Let's create an <c>ArrayList</c> of <c>String</c> elements by using the <c>new</c> method. The element data type is enclosed in angle brackets. As with arrays, all the elements in an <c>ArrayList</c> must be of the same data type.</p>

<console prompt="jshell&gt; ">
<input>ArrayList&lt;String&gt; animals = new ArrayList&lt;String&gt;();</input>
<output>animals ==> []</output>
</console>

    <p>The <c>add</c> method appends items to the end of the list and returns <c>true</c>. A two-argument version of <c>add</c> lets you give an index position at which to add an element, but it does not return any value. As with arrays, the first element in an <c>ArrayList</c> has index zero.</p>

<console prompt="jshell&gt; ">
<input>animals.add("ibex");</input>
<output>$5 ==> true
&#160;</output>

<input>animals.add("capybara");</input>
<output>$6 ==> true
&#160;</output>

<input>animals.add("bison");</input>
<output>$7 ==> true
&#160;</output>

<input>animals</input>
<output>animals ==> [ibex, capybara, bison]
&#160;</output>

<input>animals.add(1, "giraffe");</input>
<output>
&#160;</output>
<input>animals</input>
<output>animals ==> [ibex, giraffe, capybara, bison]
&#160;</output>
</console>

<p>Here are other commonly-used <c>ArrayList</c> methods:</p>

<table xml:id="table-arraylist-methods" label="table-arraylist-methods">
    <title>ArrayList Methods</title>
    <tabular>
        <col width="50%"/>
        <col width="50%"/>

        <row header="yes">
            <cell><p>Method</p></cell>
            <cell><p>Purpose</p></cell>
        </row>
        <row>
            <cell><p><c>size()</c></p></cell>
            <cell><p>Returns number of elements in list</p></cell>
        </row>
        <row>
            <cell><p><c>get(index)</c></p></cell>
            <cell><p>Returns the element at the given index in the list</p></cell>
        </row>
        <row>
            <cell><p><c>set(index, element)</c></p></cell>
            <cell><p>Replaces item at given index with the given element. Returns the element previously at the position.</p></cell>
        </row>
        <row>
            <cell><p><c>remove(index)</c></p></cell>
            <cell><p>Removes and returns the element at the given index</p></cell>
        </row>
        <row>
            <cell><p><c>removeRange(start, finish)</c></p></cell>
            <cell><p>Removes elements from index <c>start</c> up to, but not including, <c>finish</c></p></cell>
        </row>
        <row>
            <cell><p><c>indexOf(element)</c></p></cell>
            <cell><p>Returns index of the first occurrence of the element in the list, or -1 if element is not in list.</p></cell>
        </row>
    </tabular>
</table>

  </subsection>

  <subsection xml:id="introduction_wrapper-classes" label="introduction_wrapper-classes">
    <title>Wrapper Classes</title>
    <p>Let's say we wanted an <c>ArrayList</c> with floating point values. If we try something like the following, we get an error:</p>
<console prompt="jshell&gt; ">
<input>ArrayList&lt;double&gt; prices = new ArrayList&lt;double&gt;();</input>
<output>|  Error:
|  unexpected type
|    required: reference
|    found:    double
|  ArrayList&lt;double&gt; prices = new ArrayList&lt;double&gt;();
|            ^----^</output>
</console>

    <p>The problem here is that the data type in the angle brackets <em>must</em> be a reference type (object), but data types such as <c>int</c> and <c>double</c> are primitives. Java solves this problem by providing classes that <q>wrap</q> a primitive value into an object:</p>

<table xml:id="table-wrapper-classes" label="table-wrapper-classes">
    <title>Wrapper Classes</title>
    <tabular>
        <row header="yes">
            <cell>Wrapper Class</cell>
            <cell>Wraps primitive</cell>
        </row>
        <row>
            <cell><c>Integer</c></cell>
            <cell><c>int</c></cell>
        </row>
        <row>
            <cell><c>Double</c></cell>
            <cell><c>double</c></cell>
        </row>
        <row>
            <cell><c>Boolean</c></cell>
            <cell><c>boolean</c></cell>
        </row>
        <row>
            <cell><c>Character</c></cell>
            <cell><c>char</c></cell>
        </row>
    </tabular>
</table>

<p>It is possible to use explicit methods to wrap and unwrap primitives (also referred to as <term>box</term> and <term>unbox</term>):</p>

<console prompt="jshell&gt; ">
<input>Integer objectAge = Integer.valueOf(37);</input>
<output>objectAge ==&gt; 37
&#160;</output>

<input>int primitiveAge = objectAge.intValue();</input>
<output>primitiveAge ==&gt; 37</output>
</console>

<p>However, modern versions of the Java compiler will automatically <q>auto-box</q> and <q>auto-unbox</q> values:</p>

<console prompt="jshell&gt; ">
<input>Integer objectAge = 37;</input>
<output>objectAge ==> 37
&#160;</output>

<input>int primitiveAge = objectAge;</input>
<output>primitiveAge ==> 37</output>
</console>
</subsection>

<subsection xml:id="introduction_array-to-arraylist" label="introduction_array-to-arraylist">
    <title>Converting an Array to an ArrayList</title>
    <p>
    While you can initialize an array using brace notation, as in the following:
    </p>

    <pre>double discount_rates = {0.03, 0.07, 0.105, 0.15}</pre>

    <p>
    You cannot initialize an <c>ArrayList</c> the same way. Instead, you might do something like this:
    </p>

    <program language="java">
    <input>
import java.util.ArrayList;
ArrayList&lt;Double&gt; discount_rates = new ArrayList&lt;&gt;();
discount_rates.add(0.03);
discount_rates.add(0.07);
discount_rates.add(0.105);
discount_rates.add(0.15);
</input>
</program>

    <p>Notice that the second set of angle brackets in the second line is empty. Java will implicitly use the same data type as on the left hand side of the assignment, which saves you some typing.</p>

    <p>Still, this code is verbose; there must be a better way. Here is a <em>slightly</em> better way to do it.</p>

<program language="java" line-numbers="yes">
<input>
import java.util.ArrayList;
import java.util.Arrays; // notice the "s" at the end!!

ArrayList&lt;Double&gt; discount_rates = new ArrayList&lt;&gt;(
    Arrays.asList(
        new Double[] {0.03, 0.07, 0.105, 0.15}
    )
)
</input>
</program>

<p>You need to <c>import</c> the <c>Arrays</c> class (line 2). Reading from the <q>inside out</q>, line 6 creates a new array of <c>Double</c> on the fly; this avoids needing a temporary variable. Line 5 converts it to a <c>List</c> (another one of Java's collections), and that becomes the arument to the <c>ArrayList</c> constructor on line 4.</p>

</subsection>

<subsection>
    <title>The HashMap Collection</title>
    <p>
        Another important collection type in Java is an unordered structure called a <term>HashMap</term>. A <c>HashMap</c> is a collection of associated pairs of items where each pair consists of a key and a value. Unlike arrays and ArrayLists, which are indexed by number, you access values in a HashMap by their keys. For example, if we want to represent <xref ref="table-city-hashmap"/> of cities and their populations (according to 2018 estimates by the United Nations):
    </p>

    <table xml:id="table-city-hashmap" label="table-city-hashmap">
    <title>Table of Cities and Populations</title>
    <tabular>
        <row header="yes">
            <cell>City</cell>
            <cell>Population</cell>
        </row>
        <row>
            <cell>New York City</cell>
            <cell>7,888,121</cell>
        </row>
        <row>
            <cell>Tokyo</cell>
            <cell>13,515,271</cell>
        </row>
        <row>
            <cell>Dhaka</cell>
            <cell>8,906,039</cell>
        </row>
        <row>
            <cell>Luanda</cell>
            <cell>2,165,867</cell>
        </row>
        </tabular>
        </table>

        <p>We would use this code:</p>
        <program language="java" line-numbers="yes">
            <input>
import java.util.HashMap;

public class HashMapExample {

    public static void main(String[] args) {

        HashMap&lt;String, Integer&gt; cityInfo = new HashMap&lt;&gt;();
        cityInfo.put("New York City", 7_888_121);
        cityInfo.put("Tokyo", 13_515_271);
        cityInfo.put("Dhaka", 8_906_039);
        cityInfo.put("Luanda", 2_165_867);

        System.out.println(cityInfo);
    }
}
            </input>
        </program>
        <p>Line 7 creates the HashMap, where we put the data types for the key and value inside angle brackets. The data types must be reference types, which is why we are using <c>Integer</c> (the objecct wrapper for <c>int</c>).</p>

        <p>Lines 8-11 use the <c>put()</c> method to add keys and values to the HashMap. If a key already is in the HashMap, the value given as the second argument will replace the current HashMap value.</p>

        <aside>
            <p>You can put underscores anywhere in an integer literal such as 2_165_867 to make your source code more readable.</p>
        </aside>
        <p>Here's the output from the program:</p>
        <console><output>{New York City=7888121, Tokyo=13515271, Dhaka=8906039, Luanda=2165867}</output></console>
        <p>In this example, it just so happens that the output matches the order in which we entered the items, but there is no guarantee that this will always be the case; the keys in a HashMap are <term>unordered</term>.</p>

        <p>To access a value in the map, use the <c>get()</c> method. If the key used as an argument is in the HashMap, this method returns the value; otherwise, it returns <c>null</c>.</p>

        <p>You can, then, iterate through a HashMap with code like this, which uses the <c>keySet()</c> method to return a collection of all the HashMap's keys:</p>

        <program language="java"><input>
for (String key: cityInfo.keySet()) {
    System.out.format("Key %s has value %,d.%n",
        key, cityInfo.get(key));
}
        </input></program>

        <p>That produces this output:</p>
        <console><output>
Key New York City has value 7,888,121.
Key Tokyo has value 13,515,271.
Key Dhaka has value 8,906,039.
Key Luanda has value 2,165,867.
</output></console>

<p>Here are the commonly-used <c>HashMap</c> methods:</p>

<table xml:id="table-hashmap-methods" label="table-hashmap-methods">
    <title>HashMap Methods</title>
    <tabular>
        <col width="50%"/>
        <col width="50%"/>
        <row header="yes">
            <cell>Method</cell>
            <cell>Purpose</cell>
        </row>
        <row>
            <cell><p><c>size()</c></p></cell>
            <cell><p>Returns number of key/value pairs in the map</p></cell>
        </row>
        <row>
            <cell><p><c>get(key)</c></p></cell>
            <cell><p>Returns the value associated with the given key</p></cell>
        </row>
        <row>
            <cell><p><c>put(key, value)</c></p></cell>
            <cell><p>Replaces value for given key if it is in the map already; adds a new key and value if not. Returns the value previously associated with the key, or <c>null</c> if not previously in map.</p></cell>
        </row>
        <row>
            <cell><p><c>remove(key)</c></p></cell>
            <cell><p>Removes and returns the value for the given key, or <c>null</c> if key is not in the map.</p></cell>
        </row>
        <row>
            <cell><p><c>keySet()</c></p></cell>
            <cell><p>Returns a collection of the keys contained in the map.</p></cell>
        </row>
        <row>
            <cell><p><c>containsKey(key)</c></p></cell>
            <cell><p>Returns <c>true</c> if key is in the map, otherwise <c>false</c>.</p></cell>
        </row>
    </tabular>
</table>
</subsection>

<subsection>
    <title>The Set Collection</title>
    <p>The <c>Set</c> collection implements the mathematical version of a set. You can think of a <c>Set</c> as an unordered, well, set of elements where no item appears more than once. In Java, <c>Set</c> is an <em>interface</em>; when we need an actual set, we will construct a <c>HashSet</c> (a set using a <c>HashMap</c> for its underlying storage).</p>

    <p>Here are the commonly-used <c>Set</c> methods:</p>

<table xml:id="table-set-methods" label="table-set-methods">
    <title>Set Methods</title>
    <tabular>
        <col width="50%"/>
        <col width="50%"/>

        <row header="yes">
            <cell><p>Method</p></cell>
            <cell><p>Purpose</p></cell>
        </row>
        <row>
            <cell><p><c>remove(element)</c></p></cell>
            <cell><p>If the element is in the set, removes the object from the set and returns <c>true</c>;
                    otherwise returns <c>false</c> and leaves the set unchanged</p></cell>
        </row>
        <row>
            <cell><p><c>contains(element)</c></p></cell>
            <cell><p>Returns <c>true</c> if the element is in the set, <c>false</c> otherwise.</p></cell>
        </row>
    </tabular>
</table>
</subsection>

</section>
