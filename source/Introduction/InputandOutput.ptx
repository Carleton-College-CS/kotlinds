<?xml version="1.0"?>
<section xml:id="introduction_input-and-output">
  <title>Input and Output</title>
  <introduction>
  <p>We often have a need to interact with users,
            either to get data or to provide some sort of result. Most programs
            today use a dialog box as a way of asking the user to provide some type
            of input. While Java does have a way to create dialog boxes, there is
            a <c>Scanner</c> class we can use to get input from the command line.</p>

          <p><xref ref="input-output-age"/> asks the user for their age in years and prints
            the approximate age in days:</p>

          <listing xml:id="input-output-age" label="input-output-age">
            <caption>Age in Days Program</caption>
            <program language="java" line-numbers="yes">
              <input>
import java.util.Scanner;

class AgeInDays {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        System.out.print("Enter your age in years: ");
        int years = input.nextInt();

        int days = years * 365;
        System.out.println("Your age in days is approximately "
            + days + ".");
    }
}
</input></program></listing>

<p>Any <c>import</c> statements that your program does should come at the beginning of the file.
  In line 6, the left-hand side of the assignment declares a <c>Scanner</c> object named <c>input</c>.
  The right-hand side constructs a <c>new</c> <c>Scanner</c> object based on the user's keyboard (<c>System.in</c>).
  The <c>System</c> class is automatically imported for you.</p>

<p>Line 8 prints the prompt for the user. Notice that it uses <c>System.out.print()</c> instead of <c>System.out.println()</c>; the output will <em>not</em> be followed by a newline; we want the input cursor on the same line as the prompt.</p>

<p>Line 9 gets the next integer from the <c>Scanner</c> and assigns it to <c>years</c>.</p>

<p>Lines 12 and 13 produce the output, using the <c>+</c> operator to concatenate strings; <c>days</c> will implicitly be converted to a string in the process.</p>

<p>Here is what the output of running this program looks like:</p>

<console>
  <output>Enter your age in years: 27
Your age in days is approximately 9855.</output>
</console>

<p>The <c>Scanner</c> class reads <term>tokens</term> from the input; it skips over any leading white space (blanks, tabs, and newlines), and reads up to, but not including, the next blank, tab, or newline.)  Here are other <c>Scanner</c> methods:</p>

    <table>
      <tabular>
        <col width="25%"/>
        <col width="75%"/>
        <row>
          <cell><p><c>nextInt()</c></p></cell>
          <cell><p>Reads next token, converts it to an integer, and returns it.</p></cell>
        </row>
        <row>
          <cell><p><c>nextDouble()</c></p></cell>
          <cell><p>Reads next token, converts it to a double, and returns it.</p></cell>
        </row>
        <row>
          <cell><p><c>nextBoolean()</c></p></cell>
          <cell><p>Reads next token, converts it to a boolean, and returns it.</p></cell>
        </row>
        <row>
          <cell><p><c>next()</c></p></cell>
          <cell><p>Reads next token and returns it as a String.</p></cell>
        </row>
        <row>
          <cell><p><c>nextLine()</c></p></cell>
          <cell><p>Advances scanner past the current line and returns the skipped String. (This has the same effect as reading the next line up to and including a newline, and returning the line <em>without</em> the newline character.)</p></cell>
        </row>
      </tabular>
    </table>

</introduction>

  <subsection xml:id="introduction_string-formatting">
    <title>String Formatting</title>
    <p>While we can use <c>System.out.println()</c> for output, it often gives us output that is less than pleasing, as in <xref ref="io_discount_program"/>.</p>

    <listing xml:id="io_discount_program">
      <program language="java" line-numbers="yes"><input>import java.util.Scanner;

class Discount {

    public static void main(String[] args) {
        final double DISCOUNT_RATE = 0.0725;

        Scanner input = new Scanner(System.in);

        System.out.print("Enter price: $");
        double price = input.nextDouble();

        double newPrice = price * (1.0 - DISCOUNT_RATE);
        System.out.println("Your new price is $" + newPrice + ".");
    }
}</input>
</program>
</listing>

<p>Here is its output:</p>

<console>
  <output>Enter price: $12.95
Your new price is $12.011125.</output>
</console>

<aside>
<p>Line 6 introduces the <c>final</c> keyword, used to declare values that are constant. Once initialized, a <c>final</c> variable's value cannot be change. By convention, names of <c>final</c> variables are all upper case, with underscores used to separate words.</p>
</aside>

<p>It is often useful to have more control over the look of your output. Fortunately, Java provides us with an alternative called <term>formatted printing</term>. The <c>System.out.format()</c> method as its first argument a <term>format string</term><mdash/> a template in which words or spaces that will remain constant are combined with placeholders for variables that will be inserted into the string. Let's expand on our <q>age in days</q> program to ask the user's name:</p>

    <listing xml:id="io_age-and-name">
      <caption>Name and Age</caption>
      <program language="java" line-numbers="yes"><input>import java.util.Scanner;

class AgeAndName {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        System.out.print("Enter your name: ");
        String name = input.nextLine();

        System.out.print("Enter your age in years: ");
        int years = input.nextInt();

        int days = years * 365;
        System.out.format("You are about %d days old, %s.%n",
            days, name);
    }
}</input></program></listing>


<p>Let's examine lines 15 and 16. The first argument to <c>format()</c> is the format string. The <c>%d</c> and <c>%s</c> are <term>format specifiers</term>; you can think of them as placeholders for values.  The <c>%d</c> specifier says that the placeholder will be filled in by a decimal integer value; <c>%s</c> is a placeholder for a String value.</p>
<p>The third specifier <c>%n</c> is special. It is <em>not</em> a placeholder for a value; instead, it stands for newline, as <c>format()</c> does not automatically print a newline character at the end of its output. You can also use the escape sequence <c>\n</c>, but <c>%n</c> is preferred.</p>

<p>The remaining arguments to <c>format()</c> are the values that will fill in the <c>%d</c> and <c>%s</c> placeholders. The values are taken in order from left to right and inserted into the format string. Here's what the output looks like:</p>

<console>
Enter your name: Kim
Enter your age in years: 29
You are about 10585 days old, Kim.
</console>

    <p>The format string may contain one or more conversion specifications. A
                conversion character tells the format operator what type of value is
                going to be inserted into that position in the string. In the example
                above, the <c>s</c> specifies a string, while the <c>d</c> specifies an
                integer. Other possible type specifications include <c>f</c>,
                <c>e</c>, <c>g</c>, <c>c</c>, or <c>%</c>. <xref ref="introduction_tab-fmta"/> summarizes all of the
                various type specifications.</p>
    <table xml:id="introduction_tab-fmta" label="introduction_tab-fmta">
      <tabular>
        <title>
          <term>String Formatting Conversion Characters</term>
        </title>
        <row header="yes">
          <cell><term>Character</term></cell>
          <cell><term>Output Format</term></cell>
        </row>
        <row>
          <cell><c>d</c></cell>
          <cell>Integer</cell>
        </row>
        <row>
          <cell><c>u</c></cell>
          <cell>Unsigned integer</cell>
        </row>
        <row>
          <cell><c>f</c></cell>
          <cell>Floating point (default six decimal places if needed)</cell>
        </row>
        <row>
          <cell><c>e</c></cell>
          <cell>Floating point as exponential notation: m.dddddde+/-xx</cell>
        </row>
        <row>
          <cell><c>E</c></cell>
          <cell>Floating point as exponential notation: m.ddddddE+/-xx</cell>
        </row>
        <row>
          <cell><c>g</c></cell>
          <cell>Use <c>%e</c> for exponents less than <m>-4</m> or greater than <m>+5</m>, otherwise use <c>%f</c></cell>
        </row>
        <row>
          <cell><c>c</c></cell>
          <cell>Single character</cell>
        </row>
        <row>
          <cell><c>s</c></cell>
          <cell>String</cell>
        </row>
        <row>
          <cell><c>%</c></cell>
          <cell>Insert a literal <c>%</c> character</cell>
        </row>
        <row>
          <cell><c>n</c></cell>
          <cell>Insert a newline character</cell>
        </row>
      </tabular>
    </table>

    <p>In addition to the format character, you can also include a format
                modifier between the <c>%</c> and the format character. Format modifiers can be used to specify the field width along with a number of digits after the decimal point. <xref ref="introduction_tab-fmtaddsa"/>
                explains these format modifiers.</p>
    <table xml:id="introduction_tab-fmtaddsa">
      <tabular>
        <title>
          <term>Table 10: Additional formatting options</term>
        </title>
        <row header="yes">
          <cell><term>Modifier</term></cell>
          <cell><term>Example</term></cell>
          <cell><term>Description</term></cell>
        </row>
        <row>
          <cell>number</cell>
          <cell><c>%20d</c></cell>
          <cell>Put the value in a field width of 20</cell>
        </row>
        <row>
          <cell><c>-</c></cell>
          <cell><c>%-20d</c></cell>
          <cell>Put the value in a field 20 characters wide, left-justified</cell>
        </row>
        <row>
          <cell><c>+</c></cell>
          <cell><c>%20d</c></cell>
          <cell>Put the value in a field 20 characters wide, right-justified</cell>
        </row>
        <row>
          <cell><c>0</c></cell>
          <cell><c>%020d</c></cell>
          <cell>Put the value in a field 20 characters wide, fill in with leading zeros</cell>
        </row>
        <row>
          <cell><c>.</c></cell>
          <cell><c>%20.2f</c></cell>
          <cell>Put the value in a field 20 characters wide with 2 characters to the right of the decimal point</cell>
        </row>
      </tabular>
    </table>


    <p><xref ref="io_format-examples"/> gives some examples of <c>System.out.format()</c>.</p>

    <listing xml:id="io_format-examples">
      <caption>Examples of Formatted Output</caption>
      <program language="java" line-numbers="yes"><input>
class FormatExamples {

    public static void main(String[] args) {
        String word = "Java";
        int number = 123456;
        double value = 12345.678901234;

        /*
         * The vertical bars in the output let you see the
         * alignment more clearly.
         */

        System.out.format("|%s|%n", word);
        System.out.format("|%10s|%n", word);    // right-aligned
        System.out.format("|%-10s|%n", word);   // left-aligned

        System.out.println(); // blank line for readability

        System.out.format("|%d|%n", number);
        System.out.format("|%10d|%n", number);
        System.out.format("|%-10d|%n", number);
        System.out.format("|%,10d|%n", number);

        System.out.println();

        System.out.format("|%f|%n", value);
        System.out.format("|%10.3f|%n", value);
        System.out.format("|%,10.3f|%n", value);
        System.out.format("|%10.3e|%n", value);
        System.out.format("|%10.7f|%n", value);
    }
}
</input></program></listing>

<p>The width given in the example is the <em>minimum</em> space allocated for the output. If output requires more space, as in the last line, it will use more.</p>

<p>Here is the output:</p>

<console><output>|Java|
|      Java|
|Java      |

|123456|
|    123456|
|123456    |
|   123,456|

|12345.678901|
| 12345.679|
|12,345.679|
| 1.235e+04|
|12345.6789012|</output></console>


<p>This program also gives examples of how to write a <term>comment</term> in Java. The characters <c>//</c> introduce a single-line comment; Java ignores everything from the <c>//</c> to the end of line (lines 14, 15, and 17). Multi-line coments begin with <c>/*</c> and end with <c>*/</c> (lines 8-11).</p>

  </subsection>
</section>
