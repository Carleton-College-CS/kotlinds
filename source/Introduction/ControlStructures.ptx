<?xml version="1.0"?>
<section xml:id="introduction_control-structures">
  <title>Control Structures</title>
  <p>As we noted earlier, algorithms require two important control structures: selection and iteration. Java supports both of these in various forms. Programmers can choose the statement that is most useful for the given circumstance.</p>

  <p>Selection statements allow programmers to ask questions and then, based on the result, perform different actions. Most programming languages provide two versions of this useful construct: the <c>if...else</c> and the <c>if</c>. The following code fragment is an example of a binary selection using the <c>if...else</c> statement.</p>

  <program language="java"><input>
Scanner input = new Scanner(System.in);
System.out.print("Enter a number: ");
double n = input.nextDouble();

if (n >= 0) {
    System.out.println(Math.sqrt(n));
} else {
    System.out.println("Number can not be negative.");
}</input></program>

  <p>In this example, the value of variable <c>n</c> is checked to see if it is greater than or equal to zero. If it is, the program prints the square root of the number.  If it is not, the statement performs the <c>else</c> clause and tells the user that the number cannot be negative.</p>

  <p>The condition for the <c>if</c> must be enclosed in parentheses. The body of the <c>if</c> and <c>else</c> clause is enclosed in braces. If there is exactly one statement in the clause, you may omit the braces, but doing so may lead to code that is ambiguous and difficult to read. Thus, we strongly recommend that you <em>always</em> use braces (with one exception that we will cover later).</p>

  <p>Selection constructs, as with any control construct, can be nested so that the result of one question helps decide whether to ask the next. For example, assume that <c>score</c> is a variable holding a reference to a score for a computer science test.</p>

  <program language="java" line-numbers="yes">
    <input>
String grade;

if (score >= 90) {
    grade = "A";
} else {
    if (score >= 80) {
        grade = "B";
    } else {
        if (score >= 70) {
            grade = "C";
        } else {
            if (score >= 60) {
                grade ="D";
            } else {
                grade = "F";
            }
        }
    }
}

System.out.println("The grade is " + grade + ".");
      </input>
    </program>
  <p>This fragment will classify a value called <c>score</c> by printing the letter grade earned. If the score is greater than or equal to 90, the variable <c>grade</c> will be assigned <c>"A"</c>. If it is not (<c>else</c>), the next question is asked. If the score is greater than or equal to 80, then it must be between 80 and 89 since the answer to the first question was false. In this case, the grade becomes <c>"B"</c> is printed. You can see that using correct indentation pattern helps to make sense of the association between <c>if</c> and <c>else</c>.</p>

  <p>The drawback of this indentation is that the code tends to march off the page to the right, which does not help readability. We can, however, consider the block in lines 6-18 as a single statement, and use the <q>omit braces</q> shortcut. Similarly, we can eliminate braces around the statement in lines 8-17 and so on. We can then follow the <c>else</c> immediately by an <c>if</c> with the resulting code:</p>

  <program language="java"><input>
String grade;

if (score >= 90) {
    grade = "A";
} else if (score >= 80) {
    grade = "B";
} else if (score >= 70) {
    grade = "C";
} else if (score >= 60) {
    grade ="D";
} else {
    grade = "F";
}

System.out.println("The grade is " + grade + ".");
      </input></program>

  <p>Note that the final <c>else</c> is still necessary to provide the default case if all other conditions fail.</p>

  <p>The <c>else</c> clause is not required in Java; an <c>if</c> without an <c>else</c> is called a single-way selection construct. In a single-way selection, if the condition is true, an action is performed. When the condition is false, processing simply continues on to the next statement after the <c>if</c>. For example, the following fragment will first check to see if the value of a variable <c>n</c> is negative. If so, then it is modified by the absolute value function. Regardless, the next action is to compute the square root.</p>
  <program language="java"><input>
if (n &lt; 0) {
    n = Math.abs(n);
}

System.out.println(Math.sqrt(n));

      </input></program>

  <p>For iteration, Java provides a standard <c>while</c> statement and two varieties of the <c>for</c> statement. The <c>while</c> statement repeats a body of code as long as a condition evaluates to <c>true</c>. Generally, we use a <c>while</c> loop for <term>indeterminate loops</term>, where we do not know how many times the loop has to iterate. Consider this program, where we ask the user repeatedly enter numbers they want to sum, entering zero when they are finished. In this case, we have no idea how many times the user will enter numbers before finishing:</p>
  <program language="java">
      <input>
import java.util.Scanner;

class SumNumbers {

    public static void main(String[] args) {

        Scanner input = new Scanner(System.in);
        double sum = 0.0;

        System.out.print("Enter a number, or zero to quit: ");
        double n = input.nextDouble();
        while (n != 0) {
            sum = sum + n;
            System.out.print("Enter another number, or zero to quit: ");
            n = input.nextDouble();
        }

        System.out.format("The sum is %.3f%n", sum);
    }
}
      </input>
  </program>

  <p>The condition on the <c>while</c> statement is evaluated at the start of each repetition. If the condition evaluates to <c>true</c>, the body of the statement will execute. While Java does not require you to indent the body of the loop, we strongly suggest you do so to make your code more readable.</p>

  <p>The <c>while</c> statement is a very general-purpose iterative structure that we will use in a number of different algorithms. In many cases, a compound condition will control the iteration. Consider the following code to sum the elements in an array up to, but not including, the first negative number:</p>

  <listing xml:id="while-not-negative" label="while-not-negative">
    <caption>Example of while loop</caption>
  <program language="java"><input>
int index = 0;
double sum = 0.0;
double [] data...; // code to initialize array

while ((index &lt; data.length) &amp;&amp; (data[index] &gt;= 0.0) {
   sum = sum + data[index];
   index = index + 1;
}
</input></program>
</listing>

<p>The compound condition would cause the body of the statement to be executed only in the case where both parts of the condition are satisfied. The value of the variable <c>index</c> would need to be less than the array length (to avoid <q>falling off the edge of the earth</q>), and the value array element at the current index would need to be greater than or equal to zero.</p>

<p>Sometimes, though, we <em>do</em> know how many iterations a calculation will require. We can use the <c>for</c> loop in conjunction with many of the Java collections to iterate over the collection's members.</p>

<p>The first version of the <c>for</c> statement combines the elements of this <c>while</c> loop:</p>

<program language="java"><input>
initialization;
while (condition) {
    loop body;
    action; // update variable used in condition
}
</input></program>

<p>Into a single statement of this form:</p>

<program language="java"><input>
for (initialization; condition; action) {
      loop body;
}
</input></program>

<p>Here is a program fragment that does the same thing as <xref ref="while-not-negative"/>, but uses a <c>for</c> loop to sum all the items up to, but not including, the first negative value in an array:</p>

 <listing xml:id="for-not-negative" label="for-not-negative">
    <caption>Example of for loop</caption>
<program language="java"><input>
double sum = 0.0;
for (int index = 0; (index &lt; data.length) &amp;&amp; (data[index] &gt;= 0.0); index++) {
    sum = sum + data[index];
}
</input></program>
</listing>

<aside>
  <p>The <c>++</c> operator increments a variable. <c>i++</c> is shorthand for <c>i = i + 1</c>.
    The <c>--</c> operator decrements a variable; <c>i--</c> is shorthand for <c>i = i - 1</c>.</p>
</aside>


<p>If you want to access every element in the collection but do not need to use the index as a part of the calculation, you can use the <term>extended <c>for</c></term> loop. The following example adds up all the items in the <c>data</c> array:</p>

<program language="java"><input>
double sum = 0.0;
for (double item: data) {
    sum = sum + item;
}
</input></program>

<p>The loop will assign each item in the <c>data</c> array to the loop variable <c>item</c>, one after another, and you can use that value in the loop body. You may use any variable name you wish; we used <c>item</c> here because it is a meaningful name.</p>

  <exercises>
    <title>Self Check</title>
    <exercise>
        <p>Write a Java program that uses a <c>while</c> loop to continually prompt the user to enter a number greater than zero until the user does so.  (Hint: as long as the number is <em>not</em> greater than zero, you must keep asking.)</p>
    </exercise>

    <exercise>
        <p>Here five scores for a student's assignments: 98.2, 85.9, 94.0, 92.0, 88.5 and the weight of each assignment: 0.3,  0.2,  0.3,  0.1,  0.1 (that is, the first assignment is worth 30% of the total grade, the second is worth 20%, and so on). Write a program which calculates a weighted sum by multiplying each score by its corresponding weight and summing them up. Your program must use a <c>for</c> loop.</p>
    </exercise>

    <exercise>
        <p>Write a Java program that takes an array of integers and produces the sum of the odd-indexed numbers and the sum of the even-indexed numbers. For example, in this array: {4, 2, 8, 5, 9}, the even-numbered index elements are 4, 8, and 89, which add up to 21. The odd-numbered index elements are 2 and 5, which sum to 7. Your program must work with any array, not just this example array. Try to do it with only one loop (hint: <c>if</c> is your friend).</p>
    </exercise>
  </exercises>
</section>
