<?xml version="1.0"?>
<section xml:id="sort-search_the-shell-sort">
  <title>The Shell Sort</title>
  <p>The <term>Shell sort</term>, sometimes called the <em>diminishing increment sort</em>,
            improves on the insertion sort by breaking the original list into a
            number of smaller sublists, each of which is sorted using an insertion
            sort. The unique way that these sublists are chosen is the key to the
            Shell sort. Instead of breaking the list into sublists of contiguous
            items, the Shell sort uses an increment <m>i</m>, sometimes called the
            <term>gap</term>, to create a sublist by choosing all items that are <m>i</m> items
            apart.</p>
          <aside>
            <p>The Shell sort is named after <url href="https://en.wikipedia.org/wiki/Donald_Shell">Donald Shell</url>, who first published the algorithm in 1959.</p>
          </aside>
  <p>This can be seen in <xref ref="i19_id1fig-incrementsa"/>. This list has nine items. If
            we use an increment of three, there are three sublists, each of which
            can be sorted by an insertion sort. After completing these sorts, we get
            the list shown in <xref ref="i19_id2fig-incrementsb"/>. Although
            the list shown in <xref ref="i19_id2fig-incrementsb"/> is not completely sorted,
            something very interesting has happened. By sorting
            the sublists, we have moved the items closer to where they actually
            belong.</p>
  <figure align="center" xml:id="i19_id1fig-incrementsa">
    <caption>A Shell Sort with Increments of Three</caption>
    <image source="SortSearch/Figures/shellsortA.png" width="50%"/>
  </figure>

  <figure align="center" xml:id="i19_id2fig-incrementsb">
    <caption>A Shell Sort after Sorting Each Sublist</caption>
    <image source="SortSearch/Figures/shellsortB.png" width="50%"/>
  </figure>

  <p><xref ref="fig-incrementsc"/> shows a final insertion sort using an increment of
            one&#x2014;in other words, a standard insertion sort. Note that by performing
            the earlier sublist sorts, we have now reduced the total number of
            shifting operations necessary to put the list in its final order. For
            this case, we need only four more shifts to complete the process.</p>

  <figure align="center" xml:id="fig-incrementsc">
    <caption>ShellSort: A Final Insertion Sort with Increment of 1</caption>
    <image source="SortSearch/Figures/shellsortC.png" width="50%"/>
  </figure>

  <figure align="center" xml:id="fig-incrementsd">
    <caption>Initial Sublists for a Shell Sort</caption>
    <image source="SortSearch/Figures/shellsortD.png" width="50%"/>
  </figure>

  <p>We said earlier that the way in which the increments are chosen is the
            unique feature of the Shell sort. The function shown in <xref ref="lst-shell"/>
            uses a different set of increments. In this case, we begin with
            <m>\frac {n}{2}</m> sublists. On the next pass,
            <m>\frac {n}{4}</m> sublists are sorted. Eventually, a single list is
            sorted with the basic insertion sort. <xref ref="fig-incrementsd"/> shows the
            first sublists for our example using this increment.</p>
  <p>The following invocation of the <c>shell_sort</c> function shows the
            partially sorted lists after each increment, with the final sort being
            an insertion sort with an increment of one.</p>
<listing xml:id="lst-shell">
  <caption>The Shell Sort</caption>
<program label="lst-shell" language="java">
    <input>
import java.util.Arrays;

public class ShellSortExample {

    public static void insertionSort(int[] list) {
        int sublistCount = list.length / 2;
        while (sublistCount &gt; 0) {
            for (int startPos = 0; startPos &lt; sublistCount; startPos++) {
                gapInsertionSort(list, startPos, sublistCount);
            }
            System.out.printf("After increments of size %d, the list is %s%n",
                sublistCount, Arrays.toString(list));
            sublistCount = sublistCount / 2;
        }
    }

    private static void gapInsertionSort(int[] list, int start, int gap) {
        for (int i = start + gap; i &lt; list.length; i = i + gap) {
            int value = list[i];
            int position = i;
            while (position &gt;= gap &amp;&amp; list[position - gap] &gt; value) {
                list[position] = list[position - gap];
                position = position - gap;
            }
            list[position] = value;
        }
    }

    public static void main(String[] args) {
        int[] testList = {54, 26, 93, 17, 77, 31, 44, 55, 20};
        System.out.println("Start point:  " + Arrays.toString(testList));
        insertionSort(testList);
        System.out.println("Final result: " + Arrays.toString(testList));
    }
}
        </input>
  </program>
</listing>

<p>Here is the output from the program:</p>
<console><output>
Start point:  [54, 26, 93, 17, 77, 31, 44, 55, 20]
After increments of size 4, the list is [20, 26, 44, 17, 54, 31, 93, 55, 77]
After increments of size 2, the list is [20, 17, 44, 26, 54, 31, 77, 55, 93]
After increments of size 1, the list is [17, 20, 26, 31, 44, 54, 55, 77, 93]
Final result: [17, 20, 26, 31, 44, 54, 55, 77, 93]
</output></console>


  <p>At first glance you may think that a Shell sort cannot be better than an
            insertion sort since it does a complete insertion sort as the last
            step. It turns out, however, that this final insertion sort does not
            need to do very many comparisons (or shifts) since the list has been
            presorted by earlier incremental insertion sorts, as described above.
            In other words, each pass produces a list that is <q>more sorted</q> than the
            previous one. This makes the final pass very efficient.</p>
  <p>Although a general analysis of the Shell sort is well beyond the scope
            of this text, we can say that it tends to fall somewhere between
            <m>O(n)</m> and <m>O(n^{2})</m>, based on the behavior described
            above. For the increments shown in <xref ref="lst-shell"/>, the performance is
            <m>O(n^{2})</m>. By changing the increment, for example using
            <m>2^{k}-1</m> (1, 3, 7, 15, 31, and so on), a Shell sort can perform
            at <m>O(n^{\frac {3}{2}})</m>.</p>
  <exercises>
    <title>Self Check</title>
    <exercise label="question_sort_4">
      <statement>
        <p>Given the following list of numbers:</p><p>[5, 16, 20, 12, 3, 8, 9, 17, 19, 7]</p>
        <p>Which answer illustrates the contents of the list after all swapping is complete for a gap size of 3?</p>
      </statement>
      <choices>
        <choice correct="yes">
          <statement>
            <p>[5, 3, 8, 7, 16, 19, 9, 17, 20, 12]</p>
          </statement>
          <feedback>
            <p>Each group of numbers represented by index positions 3 apart are sorted correctly.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>[3, 7, 5, 8, 9, 12, 19, 16, 20, 17]</p>
          </statement>
          <feedback>
            <p>This solution is for a gap size of two.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>[3, 5, 7, 8, 9, 12, 16, 17, 19, 20]</p>
          </statement>
          <feedback>
            <p>This is list completely sorted, you have gone too far.</p>
          </feedback>
        </choice>
        <choice>
          <statement>
            <p>[5, 16, 20, 3, 8, 12, 9, 17, 20, 7]</p>
          </statement>
          <feedback>
            <p>The gap size of three indicates that the group represented by every third number e.g. 0, 3, 6, 9  and 1, 4, 7 and 2, 5, 8 are sorted not groups of 3.</p>
          </feedback>
        </choice>
      </choices>
    </exercise>
  </exercises>
</section>
