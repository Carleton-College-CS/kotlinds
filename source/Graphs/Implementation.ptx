<?xml version="1.0"?>
<section xml:id="graphs_implementation">
  <title>Implementation</title>
  <p>Using HashMaps, it is easy to implement the adjacency list in
            Java. In our implementation of the graph abstract data type, we will
            create two classes:
            <c>Vertex</c>, which will represent each vertex in the graph
            (see <xref ref="graphs_lst-vertex"/>), and
            <c>Graph</c>, which holds the master list of vertices (see <xref ref="graphs_lst-graph"/>).</p>
  <p>Each <c>Vertex</c> uses a HashMap to keep track of the vertices to which
            it is connected and the weight of each edge. This map is called
            <c>neighbors</c>. The listing below shows the code for the <c>Vertex</c>
            class. The constructor initializes the <c>key</c>, which will
            typically be a string, and the <c>neighbors</c> HashMap. The
            <c>setNeighbor</c> method is used to add a connection from this vertex to
            another. The <c>getNeighbors</c> method returns all of the vertices in
            the adjacency list, as represented by the <c>neighbors</c> instance
            variable. The <c>getNeighbor</c> method returns the weight of the edge from
            this vertex to the vertex passed as a parameter.</p>
        <listing xml:id="graphs_lst-vertex"><caption>The <c>Vertex</c> Class</caption>
            <program language="java" line-numbers="yes"><input>
import java.util.HashMap;
import java.util.Set;

public class Vertex&lt;T extends Comparable&lt;T&gt;&gt;
    implements Comparable&lt;Vertex&lt;T&gt;&gt; {

    T key;
    HashMap&lt;Vertex&lt;T&gt;, Integer&gt; neighbors;

    Vertex(T key) {
        this.key = key;
        this.neighbors = new HashMap&lt;Vertex&lt;T&gt;, Integer&gt;();
    }

    /*
     * Get the weight of the edge from this vertex
     * to the other vertex. Returns null if there is no
     * connection to the other vertex.
     */
    Integer getNeighbor(Vertex&lt;T&gt; other) {
        return neighbors.get(other);
    }

    /*
     * Set a connection from this vertex to the other
     * vertex with a weight of zero
     */
    void setNeighbor(Vertex&lt;T&gt; other) {
        setNeighbor(other, 0);
    }

    /*
     * Set a connection from this vertex to the other
     * vertex with the given weight
     */
    void setNeighbor(Vertex&lt;T&gt; other, Integer weight) {
        neighbors.put(other, weight);
    }

    /*
     * Return a Set of the neighbor vertices.
     */
    Set&lt;Vertex&lt;T&gt;&gt; getNeighbors() {
        return neighbors.keySet();
    }

    /*
     * Return the key for this vertex.
     */
    T getKey() {
        return key;
    }

    public String toString() {
        String result = this.key.toString();
        if (neighbors.size() &gt; 0) {
            result = result + " connected to: ";
            for (Vertex&lt;T&gt; vertex: this.getNeighbors()) {
                result = result + vertex.key + ", ";
            }
            result = result.substring(0, result.length() - 2);
        } else {
            result = result + " has no connections";
        }
        return result;
    }

    public int compareTo(Vertex&lt;T&gt; other) {
        return this.key.compareTo(other.key);
    }

}
        </input></program></listing>

        <note>
            <title>Java Notes</title>
            <p>
                We not only want to make sure that the data type of a key can be compared (line 4); we also want to make sure
                that we can compare vertices to each other (line 5) in some of the algorithms for this chapter. This requires us to implement a <c>compareTo</c> method (lines&#xA0;68&#x2013;70). It returns the result of comparing the keys; a negative number if <c>this.key</c> is less than <c>other.key</c>, zero if they are equal, and positive if <c>this.key</c> is greater than <c>other.key</c>.
            </p>
            <p>
                In line 41, we return the neighbors as a Java <c>Set</c>. A set has the property that there are no duplicate elements. Sets are iterable, which means that we can use an extended <c>for</c> loop to examine all of a vertex's neighbors.  Using a <c>Set</c> also frees us from having to construct an <c>Iterator</c> class and implement the <c>next</c> and <c>hasNext</c> methods, as we had to do for the <c>BinarySearchTree</c> in <xref ref="trees_search-tree-implementation"/>.
            </p>
        </note>

  <p>The <c>Graph</c> class, shown in the following listing, contains a HashMap
            that maps vertex names to vertex objects. In <xref ref="graphs_an-adjacency-list"/> this
            HashMap is represented by the shaded gray box. <c>Graph</c> also
            provides methods for adding vertices to a graph and connecting one
            vertex to another. The <c>getVertices</c> method returns the names of all
            of the vertices in the graph. In addition, we have implemented the
            <c>__iter__</c> method to make it easy to iterate over all the vertex
            objects in a particular graph. Together, the two methods allow you to
            iterate over the vertices in a graph by name, or by the objects
            themselves.</p>
  <listing xml:id="graphs_lst-graph"><program language="java" line-numbers="yes"><input>
import java.util.HashMap;
import java.util.Set;

public class Graph&lt;T&gt; {
    HashMap&lt;T, Vertex&lt;T&gt;&gt; vertices;

    public Graph() {
        this.vertices = new HashMap&lt;T, Vertex&lt;T&gt;&gt;();
    }

    public void setVertex(T key) {
        vertices.put(key, new Vertex&lt;T&gt;(key));
    }

    public Vertex&lt;T&gt; getVertex(T key) {
        return vertices.get(key);
    }

    public boolean containsVertex(T key) {
        return vertices.containsKey(key);
    }

    public void addEdge(T fromVertex, T toVertex) {
        addEdge(fromVertex, toVertex, 0);
    }

    public void addEdge(T fromVertex, T toVertex,
        Integer weight) {
        if (!vertices.containsKey(fromVertex)) {
            setVertex(fromVertex);
        }
        if (!vertices.containsKey(toVertex)) {
            setVertex(toVertex);
        }
        Vertex&lt;T&gt; from = vertices.get(fromVertex);
        Vertex&lt;T&gt; to = vertices.get(toVertex);
        from.setNeighbor(to, weight);
    }

    public HashMap&lt;T, Vertex&lt;T&gt;&gt; getVertices() {
        return this.vertices;
    }

    public Set&lt;T&gt; getVertexKeys() {
        return this.vertices.keySet();
    }
}
          </input></program></listing>
  <p>Using the <c>Graph</c> and <c>Vertex</c> classes just defined, the following
            program creates the graph in <xref ref="graphs_vocabularyand-definitions"/>. First we
            create six vertices numbered 0 through 5. Then we display the vertex
            HashMap. Notice that for each key 0 through 5 we have created an
            instance of a <c>Vertex</c>. Next, we add the edges that connect the
            vertices together. Finally, loop verifies that each edge in the
            graph is properly stored. You should check the output of the edge list
            at the end of this session against the graph shown in <xref ref="graphs_vocabularyand-definitions"/>.</p>
  <listing xml:id="lst_test-graph-class">
      <caption>Testing the <c>Graph</c> Class</caption>
      <program language="java"><input>
public class TestGraph {
    public static void main(String[] args) {
        Graph&lt;Integer&gt; g = new Graph&lt;&gt;();
        for (int i = 0; i &lt; 6; i++) {
            g.setVertex(i);
        }
        g.addEdge(0, 1, 5);
        g.addEdge(0, 5, 2);
        g.addEdge(1, 2, 4);
        g.addEdge(2, 3, 9);
        g.addEdge(3, 4, 7);
        g.addEdge(3, 5, 3);
        g.addEdge(4, 0, 1);
        g.addEdge(5, 4, 8);
        g.addEdge(5, 2, 1);

        for (Integer key: g.getVertexKeys()) {
            System.out.println(g.getVertex(key));
        }
    }
}
              </input></program></listing>
  <p>Here is its output:</p>
  <console><output>
0 connected to: 5, 1
1 connected to: 2
2 connected to: 3
3 connected to: 4, 5
4 connected to: 0
5 connected to: 4, 2
</output></console>
</section>
