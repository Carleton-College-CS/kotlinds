<?xml version="1.0"?>
<section xml:id="trees_tree-traversals" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Tree Traversals</title>
  <p>Now that we have examined the basic functionality of our
            tree data structure, it is time to look at some additional usage
            patterns for trees. These usage patterns can be divided into three commonly
            used patterns to visit all the nodes in a tree. The difference between these
            patterns is the order in which each node is visited. We call this
            visitation of the nodes a <term>tree traversal</term>. The three traversals we will look
            at are called preorder, inorder, and postorder. Let's start
            out by defining these three traversals more carefully, then look at some
            examples where these patterns are useful.</p>
  <dl>
    <li>
      <title>Preorder</title>
      <p>In a <term>preorder traversal</term>, we visit the root node first, then
                        recursively do a preorder traversal of the left subtree, followed by
                        a recursive preorder traversal of the right subtree.</p>
    </li>
    <li>
      <title>Inorder</title>
      <p>In an <term>inorder traversal</term>, we recursively do an inorder traversal on
                        the left subtree, visit the root node, and finally do a recursive
                        inorder traversal of the right subtree.</p>
    </li>
    <li>
      <title>Postorder</title>
      <p>In a <term>postorder traversal</term>, we recursively do a postorder traversal of
                        the left subtree and the right subtree followed by a visit to the
                        root node.</p>
    </li>
  </dl>

  <observation>
    <p>The name of the order is based on where the root is visited; in <em>pre</em>order, we visit it first. For <em>in</em>order, we visit it in the middle, and for <em>post</em>order, we visit it last.</p>
  </observation>

  <p>Let's look at some examples that illustrate each of these three kinds of
            traversals. First let's look at the preorder traversal using a book
            as an example tree. The book is
            the root of the tree, and each chapter is a child of the root. Each
            section within a chapter is a child of the chapter, each subsection
            is a child of its section, and so on. <xref ref="i19_id1fig-booktree"/> shows a
            limited version of a book with only two chapters. Note that the
            traversal algorithm works for trees with any number of children, but we
            will stick with binary trees for now.</p>
  <figure align="center" xml:id="i19_id1fig-booktree">
    <caption>Representing a Book as a Tree</caption>
    <image source="Trees/Figures/booktree.png" width="50%" alt="image"/>
  </figure>
  <p>Suppose that you wanted to read this book from front to back. The
            preorder traversal gives you exactly that ordering. Starting at the root
            of the tree (the Book node) we will follow the preorder traversal
            instructions. We recursively call <c>preorder</c> on the left child, in
            this case Chapter1. We again recursively call <c>preorder</c> on the left
            child to get to Section 1.1. Since Section 1.1 has no children, we do
            not make any additional recursive calls. When we are finished with
            Section 1.1, we move up the tree to Chapter 1. At this point we still
            need to visit the right subtree of Chapter 1, which is Section 1.2. As
            before we visit the left subtree, which brings us to Section 1.2.1, then
            we visit the node for Section 1.2.2. With Section 1.2 finished, we
            return to Chapter 1. Then we return to the Book node and follow the same
            procedure for Chapter 2.</p>
  <p>The code for writing tree traversals is surprisingly elegant, largely
            because the traversals are written recursively. You may wonder,
            what is the best way to write an algorithm like preorder
            traversal? Should it be a method that uses a tree as a data
            structure, external to the <c>BinaryTree</c> class, or should it be a method of the tree data structure itself?
            <xref ref="trees_lst-preorder1"/> shows a version of the preorder traversal
            written as a static method that takes a binary tree as a parameter.
            The static method is particularly elegant because our base case is
            simply to check if the tree exists. If the tree parameter is <c>null</c>,
            then the function returns without taking any action.</p>
          <listing xml:id="trees_lst-preorder1"><program language="java"><input>
public static void preorder(BinaryTree&lt;String&gt; tree) {
    if (tree != null) {
        System.out.println(tree.getRootValue());
        preorder(tree.getLeftChild());
        preorder(tree.getRightChild());
    }
}
</input></program></listing>

  <p>We can also implement <c>preorder</c> as a method of the <c>BinaryTree</c>
            class. The code for implementing <c>preorder</c> as an internal method is
            shown in <xref ref="trees_lst-preorder2"/>. Notice what happens when we move the
            code from external to internal. In general, we just replace <c>tree</c>
            with <c>this</c>. Also, because this method is part of <c>BinaryTree</c>, it can directly
            access the fields. However, we also need to modify the base case. The
            internal method must check for the existence of the left and the right
            children <em>before</em> making the recursive call to <c>preorder</c>.</p>
  <listing xml:id="trees_lst-preorder2"><program language="java"><input>
public void preorder() {
    System.out.println(this.key);
    if (this.leftChild != null) {
        this.leftChild.preorder();
    }
    if (this.rightChild != null) {
        this.rightChild.preorder();
    }
}
</input></program></listing>
  <p>Which of these two ways to implement <c>preorder</c> is best? The answer is
            that implementing <c>preorder</c> as an external method is probably
            better in this case. The reason is that you very rarely want to just
            traverse the tree and print its values. In most cases, you will want to accomplish
            something else while using one of the basic traversal patterns. In fact,
            we will see in the next example that the <c>postorder</c> traversal pattern
            follows very closely with the code we wrote earlier to evaluate a parse
            tree. Therefore, we will write the rest of the traversals as external
            methods.</p>

  <p>The algorithm for the <c>postorder</c> traversal, shown in
            <xref ref="trees_lst-postorder1"/>, is nearly identical to <c>preorder</c> except that
            we move the call to print to the end of the function.</p>
          <listing xml:id="trees_lst-postorder1"><program language="java"><input>
public static void postorder(BinaryTree&lt;String&gt; tree) {
    if (tree != null) {
        postorder(tree.getLeftChild());
        postorder(tree.getRightChild());
        System.out.println(tree.getKeyValue());
    }
}
</input></program></listing>

  <p>We have already seen a common use for the postorder traversal, namely
            evaluating a parse tree. Look back at <xref ref="trees_parse-tree"/> again.
            The algorithm evaluates the left subtree, evaluates the right subtree,
            and combines them in the root through the function call to an
            operator.
            Assuming our binary tree is going to store only expression tree data,
            we rewrite the evaluation function, but model it even more closely on
            the postorder code in <xref ref="trees_lst-postorder1"/>.</p>
  <listing xml:id="trees_lst-postordereval"><program language="java"><input>
    public static Double postorderEvaluate(BinaryTree&gt;String&gt; tree) {
        Double leftValue = null;
        Double rightValue = null;
        Double result;
        if (tree != null) {
            leftValue = postorderEvaluate(tree.getLeftChild());
            rightValue = postorderEvaluate(tree.getRightChild());
            if (leftValue != null &amp;&amp; rightValue != null) {
                String operator = tree.getRootValue();
                if (operator.equals("+")) {
                    result = leftValue + rightValue;
                } else if (operator.equals("-")) {
                    result = leftValue - rightValue;
                } else if (operator.equals("*")) {
                    result = leftValue * rightValue;
                } else {
                    result = leftValue / rightValue;
                }
                return Double.doubleValu(result);
            }
            return Double.parseDouble(tree.getRootValue());
        } else {
            return null;
        }
    }
    </input></program></listing>

  <p>Notice that the form in <xref ref="trees_lst-postorder1"/> is the same as the form
            in <xref ref="trees_lst-postordereval"/>, except that instead of printing the key at
            the end of the function, we return it. This allows us to save the values
            returned from the recursive calls in lines 11 and 12. We
            then use these saved values along with the operator on line 14.</p>

  <p>The final traversal we will look at in this section is the inorder
            traversal. In the inorder traversal we visit the left subtree, followed
            by the root, and finally the right subtree. <xref ref="trees_lst-inorder1"/> shows
            our code for the inorder traversal. Notice that in all three of the
            traversal functions we are simply changing the position of the <c>System.out.println</c>
            call with respect to the two recursive function calls.</p>
  <listing xml:id="trees_lst-inorder1"><program language="java">
    <input>
    public static void inorder(BinaryTree&lt;String&gt; tree) {
        if (tree != null) {
            inorder(tree.leftChild);
            System.out.println(tree.key);
            inorder(tree.rightChild);
        }
    }
</input>
  </program></listing>
  <p>If we perform an inorder traversal of a parse tree, we get our
            original expression back without any parentheses. Let's modify the
            basic inorder algorithm to allow us to recover the fully parenthesized
            version of the expression as a string. The only modifications we will make to the
            basic template are as follows: put a left parenthesis <em>before</em> the
            recursive call to the left subtree, and put a right parenthesis
            <em>after</em> the recursive call to the right subtree. The modified code is
            shown in <xref ref="trees_lst-printexp"/>.</p>
  <listing xml:id="trees_lst-printexp"><program language="java">
    <input>
    public static String expressionToString(BinaryTree&lt;String&gt; tree) {
        String result = "";
        if (tree != null) {
            result = result + "(" + expressionToString(tree.leftChild);
            result = result + tree.key;
            result = result + expressionToString(tree.rightChild) + ")";
        }
        return result;
    }
</input>
  </program></listing>
  <p>Notice that the <c>expressionToString</c> method as we have implemented it puts
            parentheses around each number. While not incorrect, the parentheses are
            clearly not needed. In the exercises at the end of this chapter you are
            asked to modify the <c>expressionToString</c> function to remove this set of parentheses.</p>
</section>
