<?xml version="1.0"?>
<section xml:id="trees_binary-heap-operations">
  <title>Binary Heap Operations</title>
  <p>The basic operations we will implement for our binary heap are as
            follows:</p>
  <p>
    <ul>
      <li>
        <p><c>BinaryHeap()</c> creates a new empty binary heap.</p>
      </li>
      <li>
        <p><c>insert(k)</c> adds a new item to the heap.</p>
      </li>
      <li>
        <p><c>getMin()</c> returns the item with the minimum key value, leaving
                    the item in the heap.</p>
      </li>
      <li>
        <p><c>delete()</c> returns the item with the minimum key value, removing
                    the item from the heap.</p>
      </li>
      <li>
        <p><c>isEmpty()</c> returns <c>True</c> if the heap is empty, <c>False</c> otherwise.</p>
      </li>
      <li>
        <p><c>size()</c> returns the number of items in the heap.</p>
      </li>
      <li>
        <p><c>heapify(list)</c> builds a new heap from a list of keys.</p>
      </li>
    </ul>
  </p>
  <p><xref ref="lst-heap1"/> demonstrates the use of some of the binary
            heap methods. </p>
<listing xml:id="lst-heap1">
<program label="lst-heap1" language="java">
    <input>
public class BinaryHeapTest {
    public static void main(String[] args) {
        BinaryHeap&lt;Integer&gt; myHeap = new BinaryHeap&lt;&gt;();
        myHeap.insert(5);
        myHeap.insert(7);
        myHeap.insert(3);
        myHeap.insert(11);
        System.out.println("Min value: " + myHeap.getMin());

        System.out.println("Deleting items: ");
        System.out.println(myHeap.delete());
        System.out.println(myHeap.delete());
        System.out.println(myHeap.delete());
        System.out.println(myHeap.delete());
    }
}
        </input>
  </program>
</listing>

<p>Here is its output:</p>
<console><output>Min value: 3
Size: 4
Deleting items:
3
5
7
11
</output></console>
<p> Notice that no matter what order we add items to the heap, the smallest
  is removed each time.</p>
</section>
