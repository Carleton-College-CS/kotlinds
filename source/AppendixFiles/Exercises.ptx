<?xml version="1.0" encoding="UTF-8"?>
<section xml:id="files_exercises">
<title>Exercises</title>

    <exercises>
    <exercise>

<p>
Write a program named <em>TestAverages.java</em> that asks the user for the name of an input file that has people's names and test scores. Each line has the person's name, a colon, and a list of scores separated by commas.
</p>
<p>
Next, the program asks the user for the name of an output file. The program will then read the input file and write a new output file with the names and their average scores, including the number of tests on which it is based.
</p>
<p>
Your program has to do the following error handling:
</p>
<p><ul>
<li>If the input file does not exist or cannot be opened, print an appropriate error message.</li>
<li>If the output file cannot be opened, print an appropriate error message.</li>
<li>If an input line has a non-numeric entry for a score, print an error message to the screen with the bad data and skip that score.</li>
<li>If an input line has no scores, print an appropriate message to the screen.</li>
</ul></p>

<p>For this input file <em>sampleScores.txt</em>:</p>

<console><output>
Juan Fulano: 88, 82, 89
Tran Thi B: 91, 87.5, 92, 89, 88.5
Jan Kovacs: 91, 93, 8r, 74.5
Joseph Schmegeggie:
Erika Mustermann: 79.5, 83.5, 90, 92
</output></console>

<p>Here is the result of running the program several times. First, with a bad input file name:</p>

<console><output>
Enter input file name with test scores: nosuchfile.txt
Cannot find input file nosuchfile.txt
</output></console>

<p>With a good input file name but a bad output file name. Notice that the message tells why the output file failed:</p>

<console><output>
Enter input file name with test scores: sampleScores.txt
Enter output file name for averages: /usr/output.txt
IO Error: /usr/output.txt (Permission denied)
</output></console>

<p>With a good input and output file name:</p>

<console><output>
Enter input file name with test scores: sampleScores.txt
Enter output file name for averages: output.txt
Ignoring bad number  8r for Jan Kovacs
No numbers found on line Joseph Schmegeggie:
File output.txt written successfully.
</output></console>

<p>After the program finishes successfully, the <em>output.txt</em> file looks like this:</p>

<console><output>
Juan Fulano: 86.33 (3 tests)
Tran Thi B: 89.60 (5 tests)
Jan Kovacs: 86.17 (3 tests)
Erika Mustermann: 86.25 (4 tests)
</output></console>

<p>Here are some hints:</p>

<p><ul>
<li>Do not presume that the input file will always be named <em>sampleScores.txt</em> or the output file will always be named <em>output.txt</em><mdash/>the user gets to decide those names, not you!</li>
<li> If a person has scores, but none of them are numeric, then they will have no tests to average. Your program needs to handle that situation correctly.</li>
<li>Use the <c>split</c> method in the <c>String</c> class to separate the name from the scores, and use it again to separate the individual scores. You will need to convert the resulting strings to <c>double</c>. Do this by using the <c>Double.parseDouble</c> method, which throws a <c>NumberFormatException</c> if given a non-numeric string as its parameter.</li>
</ul></p>
</exercise>


<exercise>
<p>
In this exercise, you will consolidate data from one file to create another file in a program named <em>Consolidate.java</em>. The original data is in file <em>wildfires_jan_2015.txt</em> and was extracted from a database of 1.8 million wildfires from 1992 to 2015.<fn><p>Short, Karen C. 2017. Spatial wildfire occurrence data for the United States, 1992-2015 [FPA_FOD_20170508]. 4th Edition. Fort Collins, CO: Forest Service Research Data Archive. <url href="https://doi.org/10.2737/RDS-2013-0009.4">doi.org</url></p></fn>
</p>

<p>Each line in the file contains:</p>
<p><ul>
<li>the year</li>
<li>the day of the year (1-365) the fire was discovered</li>
<li>fire perimeter (acres)</li>
<li>cause of fire (1 = lightning, 7 = arson, anything else is <q>other</q>)</li>
</ul></p>

<p>The first few lines of the file look like this:</p>

<console><output>
2015,1,2,2
2015,1,0,2
2015,1,1,2
2015,1,0,3
2015,1,0,3
2015,1,3,4
2015,1,0,4
</output></console>

<p>Your program will read this file and create a new file where each line contains, separated by commas:</p>

<p><ul>
<li>The year</li>
<li>The day of year</li>
<li>The number of lightning-caused fires and their total acreage</li>
<li>the number of arson-caused fires and their total acreage</li>
<li>The number of fires with other causes and their total acreage</li>
</ul></p>

<p>The first few lines of the output file look like this:</p>

<console><output>
2015,1,0,0,2,3,57,260
2015,2,2,1,1,0,35,13
2015,3,1,0,3,1,26,123
2015,4,0,0,2,33,21,255
</output></console>

<p>As in the preceding exercise, use <c>split</c> to separate the items, and check that data can be converted to <c>double</c> by <c>catch</c>ing <c>NumberFormatException</c>.</p>
</exercise>

<exercise>
<p>
In this exercise, you will write two classes: a class that represents information about a city and a main program that processes that information. You can find some pseudocode for this exercise that may help you get the program organized and started in the repository, file <em>CityInfo_Pseudocode.java</em>.
</p>

<p>
First, write the <c>City</c> class that defines an object with these properties:
</p>

<p><ul>
    <li><c>private String country</c>: the two-letter country code</li>
    <li><c>private String name</c>: the city name</li>
    <li><c>private int population</c>: the city's population</li>
</ul></p>

<p>Implement these methods:</p>

<p>
    <ul>
        <li>
        <c>public City(String country, String name, int population)</c>: The constructor
        </li>
        <li>Accessors and mutators:
            Write an accessor (getter) and mutator (setter) for the population, and only a getter for the country code and city name; once the object is constructed, the country and city name never change. These must be <c>public</c>.
        </li>
        <li>
            <c>public String toString()</c>: Returns a string giving the country name, city name, and population, separated by semicolons.
        </li>
    </ul>
</p>

    <p><xref ref="fig-files-cityuml"/> shows the UML diagram for the <c>City</c> class.</p>

   <figure align="center" xml:id="fig-files-cityuml">
      <image source="AppendixFiles/Figures/city.png" width="50%" alt="UML diagram"/>
    </figure>

    <p>
Then, write a class named <c>CityInfo</c> that contains the <c>main()</c> method.Use the <em>citylist.dat</em> file to set up the initial list of cities. The file is available from the repository. Each line of the text file has a country code, city name, and population, separated by semicolons. Your program must first read the city data file with this method:
</p>

<aside><p>The data for this exercise came from <url href="http://geonames.org/">geonames.org</url>, licensed under a Creative Commons Attribution 4.0 License (see <url href="https://creativecommons.org/licenses/by/4.0/">creativecommons.org</url></p></aside>

<console><output>
public static ArrayList&lt;City&gt; readCityFile(String fileName)
</output></console>

<p>
This method will open the given <c>fileName</c>, read it, and return an <c>ArrayList</c> of <c>City</c> objects corresponding to each line of the file.
</p>

<p>
If a line in the file has bad data (non-numeric population or too many or too few entries), your program will print an error that displays the bad line without entering any new data into the <c>ArrayList</c>. The <c>citylist.dat</c> file in the repository purposely contains some lines with bad data so you can test to see if your error-handling code works. Do not write your code for this specific file; another person's file might have bad data on different lines with different data on them.
</p>

<p>
If the file does not exist, the method prints an appropriate error message and returns an empty <c>ArrayList&lt;City&gt;</c>.
</p>

<p>
If the returned <c>ArrayList</c> is not empty, the program will repeatedly ask for a country code (or ENTER to quit).
Once the user enters a country code, the <c>main()</c> method will call this method:
</p>

<console><output>
public static int statistics(String countryCode,
   ArrayList&lt;City&gt; cityList)
</output></console>

<p>
The <c>statistics()</c> method will go through the city list and
</p>

<p><ul>
    <li><p>Calculate the total number of cities in the given country.</p></li>
    <li><p>If there are more than zero cities:
        <p>
        <ul>
            <li>Print the total number of cities</li>
            <li>Print the average population for those cities</li>
        </ul>
        </p>
        </p>
    </li>
    <li><p>Otherwise, prints an appropriate error message.</p></li>
    <li><p>Returns the total number of cities found.</p></li>
</ul></p>

<p>
The <c>main()</c> method will then use this returned value. If it is greater than zero, you will write a new file name <em>CC.dat</em>, where <em>CC</em> stands for a country code. This file will have the information for the cities in that country in the same format as <c>citylist.dat</c>. For example, if the country code is <c>JP</c>, your program will create a file named <em>JP.dat</em>. You will use a method named
</p>

<console><output>
public static void writeCountryFile(String countryCode,
    ArrayList&lt;City&gt; cityList)
</output></console>

<p>
to do this. If there is an <c>IOException</c> while opening the output file or writing the data, print an appropriate error message. You must use the exception's <c>getMessage()</c> method when constructing your error message. If the file is written successfully, print a message letting the user know that the file has been created. This message <em>must</em> contain the file name.
</p>

<p>
Your program must handle these exceptions:
</p>
<p><ul>
    <li>Catch <c>FileNotFoundException</c>when opening a <c>Scanner</c> for the input file. You could use the <c>File.exists()</c> method, but let's use exceptions to get more practice.)</li>
    <li>Catch <c>NumberFormatException</c> when reading the input file and converting strings to numbers.</li>
    <li>You will probably need nested <c>try</c>/<c>catch</c> blocks for file input: one outside the read loop when opening the file, and one inside the read loop to skip badly formatted lines.</li>
    <li>Catch <c>IOException</c> when writing an output file.</li>
</ul></p>

<p>Here are some things to note:</p>

<p><ul>
    <li>You must accept input in either upper or lower case.</li>
    <li>You will need to loop through the <c>cityList</c> twice; once in <c>statistics()</c> to get the total and average (if applicable), and again in <c>writeCountryFile()</c> to create the output file. This is a design decision<mdash/>we decided these are two separate tasks to be done by two methods, rather than combining both tasks into one method.</li>
</ul></p>

<p>
Here is what the program output might look like. Your output does not have to look exactly like this, but it must reflect the same information.
</p>

<console><output>
Reading city file...
"AB;Too few" does not have three entries.
"CD;Too many;1056382;extra" does not have three entries.
"EF;Bad number;one million" does not have a number on it.

Enter a two-letter country code, or press ENTER to quit: UA
Number of cities in UA: 5
Average population is 1,457,504.
File UA.dat written successfully.
Enter a two-letter country code, or press ENTER to quit: LU
No cities found in LU.
Enter a two-letter country code, or press ENTER to quit: MX
Number of cities in MX: 11
Average population is 2,427,622.
File MX.dat written successfully.
Enter a two-letter country code, or press ENTER to quit:
</output></console>

<p>Here are the contents of the file <em>UA.dat</em>:</p>

<console><output>
UA;Kiev;2797553
UA;Kharkiv;1430885
UA;Dnipropetrovsk;1032822
UA;Donets'k;1024700
UA;Odessa;1001558
</output></console>

<p>
Here is an example of the output you might get for an error while writing the file (I deliberately caused this error by changing my directory to be read-only).
</p>

<console><output>
Error writing FR.dat
FR.dat (Permission denied)
</output></console>

</exercise>
</exercises>
</section>
